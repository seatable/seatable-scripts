{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SeaTable programming manual","text":"<p>This manual is deprecated.</p> <p>Please use the new SeaTable Developer Manual instead.</p> <p>There are various ways to build extentions for SeaTable, including</p> <ul> <li>Writing a JavaScript script: The script runs directly in the current browser and is suitable for simple data processing.</li> <li>Writing a Python script: The Python runs on the server side and can be set to automatically run periodically, which is suitable for more complex data processing scenarios. You can also use the same API in your standalone Python program.</li> <li>Writing a standalone web page or accessing data in SeaTable in your Node.js program: in both case, you can accessing data in SeaTable using SeaTable JavaScript API</li> </ul>"},{"location":"#quick-start","title":"Quick start","text":"<p>In SeaTable, a base includes multiple tables, and a table contains multiple rows and columns. A row contains multiple fields.</p>"},{"location":"#javascript-script","title":"JavaScript script","text":"<p>There are two pre-defined objects:</p> <ol> <li>base, you can use base object to manipulate data in a base.</li> <li>output, you can use output object to output some feedbacks.</li> </ol> <p>Let's look at a simple example, outputing the number of tables in a base. To start with, add a new script, input the following content, then click the <code>run script</code> button.</p> <pre><code>const tables = base.getTables();\noutput.text(tables.length);\n</code></pre> <p>Let's look at another example, outputing the Name field of every rows in a table:</p> <pre><code>// get table by name\nconst table = base.getTableByName('First table'); \n// get view by name\nconst view = base.getViewByName(table, 'Default View');\n// get rows via table and view\nconst rows = base.getRows(table, view);\n// iterate and print\nfor (var i=0; i&lt;rows.length; i++) {\n  const row = rows[i];\n  output.text(row['Name']);\n}\n</code></pre> <p>From the two examples, we can see that via calling the corresponding methods of base object, we can read and write data in a base easily.</p>"},{"location":"#python-script","title":"Python script","text":"<p>When writing the script, you need to import Base objects from seatable_api and init it, and then you can call functions to operate the table. The following is a simple example, to add a row to a table:</p> <pre><code>from seatable_api import Base\n\nserver_url = os.environ.get('dtable_web_url')\napi_token = os.environ.get('api_token')\nbase = Base(api_token, server_url)\nbase.auth()\n\nrow_data = {\n    \"Name\": \"I am new Row\"\n}\nbase.append_row('Table1', row_data)\n</code></pre>"},{"location":"#reference","title":"Reference","text":"<ul> <li>Data structure</li> <li>JavaScript script</li> <li>Python script and API</li> <li>Javascript API</li> </ul>"},{"location":"data-structure/","title":"Row, Column, Table, View","text":""},{"location":"data-structure/#row","title":"Row","text":"<p>Row is an object, use <code>row['colum_name']</code> to get the value of a specific cell. There are a few special columns:</p> <ul> <li><code>_id</code> : The id of the row</li> <li><code>_creator</code> : The creator for this row</li> <li><code>_ctime</code>: The create time for this row</li> <li><code>_last_modifier</code> : The last modifier for this row</li> <li><code>_mtime</code>: The last modified time for this row</li> </ul> <p>Different column types have different type of values:</p> <p>Basic column types:</p> <ul> <li><code>text</code> : string</li> <li><code>number</code> : number</li> <li><code>checkbox</code> : boolean</li> <li><code>date</code> : string, in format <code>2020-01-01</code> or <code>2020-01-01 10:00</code> </li> <li><code>single-select</code> : option name, string</li> <li><code>long-text</code> : markdown string</li> <li><code>image</code> : array, each element of the array is the URL of image</li> <li><code>file</code> : array, each element of the array is a file object  <code>[{name: string, url: string, size: number, type: 'file'}]</code></li> <li><code>multi-select</code> : array, each element of the array is an option name</li> <li><code>collaborator</code> : array, each element of the array is a collaborator's email</li> <li><code>URL</code> : string</li> <li><code>email</code> :  string</li> <li><code>duration</code> : string, in format <code>h:mm(1:30)</code> or <code>h:mm:ss(0:20:30)</code></li> <li><code>rating</code>: number, indicates a rating</li> </ul> <p>Advanced column types:</p> <ul> <li><code>formula</code> : string</li> <li><code>geolocation</code> : object, in format <code>{province: xxx, city: xxx, district: xxx, detail: xxx}</code></li> <li><code>link</code> : array, each element of the array is a link name</li> <li><code>auto-number</code> : number, auto increase</li> </ul>"},{"location":"data-structure/#about-empty-value","title":"About empty value","text":"<p>A field is empty in the following situations</p> <ul> <li>There is no corresponding key in row</li> <li>row['colum_name'] is null (None in Python)</li> <li>The value of row['colum_name'] is '' (for string type columns)</li> <li>The value of row['colum_name'] is {} (null object, for a column of object type)</li> <li>The value of row['colum_name'] is [] (empty list, for columns of type list)</li> </ul> <p>Because the value of a cell can be generated by copying and pasting, changing column types, and filling in through scripts, the value displayed as empty on an interface may be in the above situations.</p>"},{"location":"data-structure/#column","title":"Column","text":"<p>A column object has following fields:</p> <ul> <li><code>key</code>:  The key of the column, string</li> <li><code>type</code> : The type of the column(long-text, single-select, number, file and so on), string</li> <li><code>name</code> : The name of the column, string</li> </ul>"},{"location":"data-structure/#table","title":"Table","text":"<p>A table object has following fields:</p> <ul> <li><code>_id</code>: The id of the table </li> <li><code>name</code>: The name of the table, string</li> </ul>"},{"location":"data-structure/#view","title":"View","text":"<p>A view object has following fields:</p> <ul> <li><code>name</code>: The name of the view, string</li> </ul>"},{"location":"javascript/","title":"SeaTable Javascript script","text":"<p>The Javascript script runs directly in the current browser and is suitable for simple data processing. </p> <p>There are two pre-defined objects:</p> <ol> <li>base, you can use base object to manipulate data in a base.</li> <li>output, you can use output object to output some feedbacks.</li> </ol>"},{"location":"javascript/#reference","title":"Reference","text":"<p>Data structure of SeaTable general object:</p> <ul> <li>Data structure</li> </ul> <p>Methods of the object:</p> <ul> <li>base</li> <li>output</li> <li>utilities</li> </ul>"},{"location":"javascript/#examples","title":"Examples","text":"<p>You can find some easy to understand examples through this linkhttps://github.com/seatable/seatable-scripts/tree/master/examples/javascript</p> <p>Details</p> <ul> <li>get-incremental.js: Calculate incremental data from a cumulative column</li> <li>auto-add-rows.js: Automatically record monthly repetitive items in a ledger</li> </ul>"},{"location":"javascript/base/","title":"Base object","text":"<p>Base object provide a way to manipulate data in a base.</p>"},{"location":"javascript/base/#table","title":"Table","text":""},{"location":"javascript/base/#getactivetable","title":"getActiveTable","text":"<p>Get the currently selected table and return a table object</p>"},{"location":"javascript/base/#example","title":"Example","text":"<pre><code> const table = base.getActiveTable();\n output.markdown(`#### ${table.name}`);\n</code></pre>"},{"location":"javascript/base/#gettables","title":"getTables","text":"<p>Get all tables</p>"},{"location":"javascript/base/#example_1","title":"Example","text":"<pre><code>const tables = base.getTables();\noutput.text(tables.length);\n</code></pre>"},{"location":"javascript/base/#gettablebyname","title":"getTableByName","text":"<p>Get a table object via its name</p> <pre><code>const table = base.getTableByName(tableName: String);\n</code></pre>"},{"location":"javascript/base/#example_2","title":"Example","text":"<pre><code>const table = base.getTableByName('Table1');\noutput.text(table._id);\n</code></pre>"},{"location":"javascript/base/#addtable","title":"addTable","text":"<p>Add a table</p> <pre><code>base.addTable(tableName: String);\n</code></pre>"},{"location":"javascript/base/#example_3","title":"Example","text":"<pre><code>base.addTable('New table');\n</code></pre>"},{"location":"javascript/base/#renametable","title":"renameTable","text":"<p>Rename a table</p> <pre><code>base.renameTable(oldName: String, newName: String);\n</code></pre>"},{"location":"javascript/base/#example_4","title":"Example","text":"<pre><code>base.renameTable('Old name', 'New name');\n</code></pre>"},{"location":"javascript/base/#deletetable","title":"deleteTable","text":"<p>Delete a table</p> <pre><code>base.deleteTable(tableName: String);\n</code></pre>"},{"location":"javascript/base/#example_5","title":"Example","text":"<pre><code>base.deleteTable('Old table');\n</code></pre>"},{"location":"javascript/base/#view","title":"View","text":""},{"location":"javascript/base/#getactiveview","title":"getActiveView","text":"<p>Get the current view, the method return a view object</p>"},{"location":"javascript/base/#example_6","title":"Example","text":"<pre><code>const view  = base.getActiveView();\noutput.text(view._id);\n</code></pre>"},{"location":"javascript/base/#getviews","title":"getViews","text":"<p>Get all the views of the current table, and return all the views in an array</p> <pre><code>const views = base.getViews(table: Object/String);\n</code></pre>"},{"location":"javascript/base/#example_7","title":"Example","text":"<pre><code>const table  = base.getTableByName('Table1');\nconst views = base.getViews(table);\noutput.text(views.length);\n</code></pre> <pre><code>const views = base.getViews('Table1');\noutput.text(views.length);\n</code></pre>"},{"location":"javascript/base/#getviewbyname","title":"getViewByName","text":"<p>Get a view object via its name, and return a view object</p> <pre><code>const view = base.getViewByName(table: Object/String, viewName: String);\n</code></pre>"},{"location":"javascript/base/#example_8","title":"Example","text":"<pre><code>const table  = base.getTableByName('Table1'); \nconst view = base.getViewByName(table, 'view 1');\noutput.text(view.name);\n</code></pre> <pre><code>const view = base.getViewByName('Table1', 'view 1');\noutput.text(view.name);\n</code></pre>"},{"location":"javascript/base/#addview","title":"addView","text":"<p>Add a view to a table</p> <pre><code>base.addView(table: Object/String, viewName: String);\n</code></pre>"},{"location":"javascript/base/#example_9","title":"Example","text":"<pre><code>const table  = base.getTableByName('Table1');\nbase.addView(table, 'view 2');\n</code></pre> <pre><code>base.addView('Table1', 'view 2');\n</code></pre>"},{"location":"javascript/base/#renameview","title":"renameView","text":"<p>Rename a view in the table</p> <pre><code>base.renameView(table: Object/String, currentViewName: String, nextViewName: String);\n</code></pre>"},{"location":"javascript/base/#example_10","title":"Example","text":"<pre><code>const table  = base.getTableByName('Table1');\nbase.renameView(table, 'view1', 'view2');\n</code></pre> <pre><code>base.renameView('Table1', 'view1', 'view2');\n</code></pre>"},{"location":"javascript/base/#deleteview","title":"deleteView","text":"<p>Delete a view</p> <pre><code>base.deleteView(table: Object/String, viewName: String);\n</code></pre>"},{"location":"javascript/base/#example_11","title":"Example","text":"<pre><code>const table  = base.getTableByName('Table1');\nbase.deleteView(table, 'view2');\n</code></pre> <pre><code>base.deleteView('Table1', 'view2');\n</code></pre>"},{"location":"javascript/base/#column","title":"Column","text":""},{"location":"javascript/base/#getcolumns","title":"getColumns","text":"<p>Get all the columns in the table, and return all the column objects in an array</p> <pre><code>const columns = base.getColumns(table: Object/String);\n</code></pre>"},{"location":"javascript/base/#example_12","title":"Example","text":"<pre><code>const table  = base.getTableByName('Table1');\nconst columns = base.getColumns(table);\n\ncolumn.forEach((column) =&gt; {\n    output.text(column.name);\n})\n</code></pre> <pre><code>const columns = base.getColumns('Table1');\n</code></pre>"},{"location":"javascript/base/#getshowncolumns","title":"getShownColumns","text":"<p>Get all the displayed columns in a view, excluding the hidden columns in the view, and return an array</p> <pre><code>const columns = base.getShownColumns(table: Object/String, view: Object/String);\n</code></pre>"},{"location":"javascript/base/#example_13","title":"Example","text":"<pre><code>const table  = base.getTableByName('Table1');\nconst view = base.getViewByName(table, 'view 1');\nconst columns = base.getShownColumns(table, view);\ncolumn.forEach((column) =&gt; {\n    output.text(column.name);\n})\n</code></pre> <pre><code>const columns = base.getShownColumns('Table1', 'view 1');\n</code></pre>"},{"location":"javascript/base/#getcolumnbyname","title":"getColumnByName","text":"<p>Get the column object via its name</p> <pre><code>const column = base.getColumnByName(table: Object/String, name: String);\n</code></pre>"},{"location":"javascript/base/#example_14","title":"Example","text":"<pre><code>const column = base.getColumnByName(table, 'Column name');\noutput.text(column.name);\n</code></pre> <pre><code>const column = base.getColumnByName('Table1', 'Column name');\n</code></pre>"},{"location":"javascript/base/#getcolumnsbytype","title":"getColumnsByType","text":"<p>Get all specific types of columns in the table</p> <pre><code>const columns = base.getColumnsByType(table: Object/String, type: String);\n</code></pre>"},{"location":"javascript/base/#example_15","title":"Example","text":"<pre><code>const table  = base.getTableByName('Table1');\nconst columns = base.getColumnsByType(table, 'text');\noutput.text(column.length);\n</code></pre> <pre><code>const columns = base.getColumnsByType('Table1', 'text');\noutput.text(column.length);\n</code></pre>"},{"location":"javascript/base/#row","title":"Row","text":""},{"location":"javascript/base/#getrows","title":"getRows","text":"<p>Get all the rows of the view and return an array</p> <pre><code>const rows = base.getRows(table: Object/String, view: Object/String);\n</code></pre>"},{"location":"javascript/base/#example_16","title":"Example","text":"<pre><code>const table = base.getTableByName('Table1');\nconst view = base.getViewByName(table, 'view1');\nconst rows = base.getRows(table, view);\n</code></pre> <pre><code>const rows = base.getRows('Table1', 'view1');\n</code></pre>"},{"location":"javascript/base/#getgroupedrows","title":"getGroupedRows","text":"<p>Get rows in the grouped view</p> <pre><code>base.getGroupedRows(table: Object/String, view: Object/String);\n</code></pre>"},{"location":"javascript/base/#example_17","title":"Example","text":"<pre><code>const table = base.getTableByName('Table1');\nconst view = base.getViewByName(table, 'GroupedView');\nconst groupViewRows = base.getGroupedRows(table, view);\n</code></pre> <pre><code>const groupViewRows = base.getGroupedRows('Table1', 'GroupedView');\n</code></pre>"},{"location":"javascript/base/#getrowbyid","title":"getRowById","text":"<p>Get a row via its id and return a row object</p> <pre><code>const row = base.getRowById(table: Object/String, rowId: String);\n</code></pre>"},{"location":"javascript/base/#example_18","title":"Example","text":"<pre><code>const table = base.getTableByName('Table1');\nconst row = base.getRowById(table, \"M_lSEOYYTeuKTaHCEOL7nw\");\n</code></pre> <pre><code>const row = base.getRowById('Table1', \"M_lSEOYYTeuKTaHCEOL7nw\");\n</code></pre>"},{"location":"javascript/base/#deleterowbyid","title":"deleteRowById","text":"<p>Delete a row in a table by its ID.</p> <pre><code>base.deleteRowById(table: Object/String, rowId: String);\n</code></pre>"},{"location":"javascript/base/#example_19","title":"Example","text":"<pre><code>const table = base.getTableByName('Table1');\nbase.deleteRowById(table, 'M_lSEOYYTeuKTaHCEOL7nw');\n</code></pre> <pre><code>base.deleteRowById('Table1', 'M_lSEOYYTeuKTaHCEOL7nw');\n</code></pre>"},{"location":"javascript/base/#addrow","title":"addRow","text":"<p>Add a row to a table</p> <pre><code>base.addRow(table: Object/String, rowData: Object, viewName?: String)\n</code></pre>"},{"location":"javascript/base/#example_20","title":"Example","text":"<pre><code>const table = base.getTableByName('Table1');\nbase.addRow(table, {'Name': 'Alex', 'Age': '18'});\nbase.addRow(table, {'Name': 'Alex', 'Age': '18'}, 'Default View');\n</code></pre> <pre><code>base.addRow('Table1', {'Name': 'Alex', 'Age': '18'});\nbase.addRow('Table1', {'Name': 'Alex', 'Age': '18'}, 'Default View');\n</code></pre>"},{"location":"javascript/base/#modifyrow","title":"modifyRow","text":"<p>Modify a row in the table</p> <pre><code>base.modifyRow(table: Object/String, row: Object, updateRowData: Object);\n</code></pre>"},{"location":"javascript/base/#example_21","title":"Example","text":"<pre><code>const table = base.getTableByName('Table1');\nconst row = base.getRowById(table, \"M_lSEOYYTeuKTaHCEOL7nw\");\nbase.modifyRow(table, row, {'Name': 'new name', 'number': 100});\n</code></pre> <pre><code>const row = base.getRowById('Table1', \"M_lSEOYYTeuKTaHCEOL7nw\");\nbase.modifyRow('Table1', row, {'Name': 'new name', 'number': 100});\n</code></pre>"},{"location":"javascript/base/#modifyrows","title":"modifyRows","text":"<p>Modify multiple rows in the table at once</p> <pre><code>base.modifyRow(table: Object/String, rows: Array, updatedRows: Array);\n</code></pre>"},{"location":"javascript/base/#example_22","title":"Example","text":"<pre><code>const table = base.getTableByName('Table1');\nconst rows = base.getRows('Table1', 'Default view');\nconst selectedColumnName = 'Name';\nconst selectedRows = [], updatedRows = [];\n\nrows.forEach((row) =&gt; {\n  if (row[columnName] === 'name') {\n    selectedRows.push(row);\n    updatedRows.push({columnName: 'name1'});\n  }\n});\nbase.modifyRow(table, selectedRows, updatedRows);\n</code></pre>"},{"location":"javascript/base/#filter","title":"filter","text":"<p>Pass a conditional statement, filter out the rows that meet the conditions in the table, and return a querySet object</p> <ul> <li> <p>\u67e5\u8be2\u8bed\u53e5\u89c4\u8303</p> </li> <li> <p>QuerySet</p> </li> </ul>"},{"location":"javascript/base/#example_23","title":"Example","text":"<pre><code>// Filter out rows whose number column is equal to 5, and return a querySet object\nconst querySet = base.filter('Table1', 'Default', 'number = 5');\n</code></pre>"},{"location":"javascript/base/#links","title":"Links","text":""},{"location":"javascript/base/#addlink","title":"addLink","text":"<p>Add link, link other table records</p> <pre><code>base.addLink(linkId, tableName, linkedTableName, rowId, linkedRowId)\n</code></pre> <ul> <li>linkId:  link_id in the data attribute of the link column</li> <li>tableName: the name of the link table</li> <li>linkedTableName: the name of the linked table</li> <li>rowId: id of link row</li> <li>linkedRowId: id of the linked row </li> </ul>"},{"location":"javascript/base/#example_24","title":"Example","text":"<pre><code>base.addLink('5WeC', 'real-img-files', 'contact', 'CGtoJB1oQM60RiKT-c5J-g', 'PALm2wPKTCy-jdJNv_UWaQ')\n</code></pre>"},{"location":"javascript/base/#removelink","title":"removeLink","text":"<p>Delete the link row</p> <pre><code>base.removeLink(linkId, tableName, linkedTableName, rowId, linkedRowId)\n</code></pre>"},{"location":"javascript/base/#example_25","title":"Example","text":"<pre><code>base.removeLink('5WeC', 'real-img-files', 'contact', 'CGtoJB1oQM60RiKT-c5J-g', 'PALm2wPKTCy-jdJNv_UWaQ')\n</code></pre>"},{"location":"javascript/base/#getcolumnlinkid","title":"getColumnLinkId","text":"<p>Get the link id by column name</p> <pre><code>base.getColumnLinkId(tableName, columnName)\n</code></pre>"},{"location":"javascript/base/#example_26","title":"Example","text":"<pre><code>base.getColumnLinkId('Table1', 'Record')\n</code></pre>"},{"location":"javascript/base/#updatelinks","title":"updateLinks","text":"<p>Remove all existing row links and add new links</p> <pre><code>base.updateLinks(linkId, tableName, linkedTableName, rowId, updatedlinkedRowIds)\n</code></pre>"},{"location":"javascript/base/#example_27","title":"Example","text":"<pre><code>const rows = base.getRows('contact', 'Default_view');\n\n// Update row links to [rows[0]._id, rows[1]._id, rows[2]._id, rows[3]._id]\nbase.updateLinks('5WeC', 'real-img-files', 'contact', 'CGtoJB1oQM60RiKT-c5J-g', [rows[0]._id, rows[1]._id, rows[2]._id, rows[3]._id])\n</code></pre>"},{"location":"javascript/base/#query","title":"query","text":"<p>Use sql to query a base</p> <pre><code>await base.query(sql)\n</code></pre>"},{"location":"javascript/base/#basic","title":"BASIC","text":"<pre><code>const data = await base.query('select name, price, year from Bill')\noutput.text(data)\n</code></pre> <p>result</p> <pre><code>[\n    {\"name\":\"Bob\",\"price\":\"300\",\"year\":\"2021\"},\n    {\"name\":\"Bob\",\"price\":\"300\",\"year\":\"2019\"},\n    {\"price\":\"100\",\"year\":\"2019\",\"name\":\"Tom\"},\n    {\"name\":\"Tom\",\"price\":\"100\",\"year\":\"2020\"},\n    {\"name\":\"Tom\",\"price\":\"200\",\"year\":\"2021\"},\n    {\"name\":\"Jane\",\"price\":\"200\",\"year\":\"2020\"},\n    {\"name\":\"Jane\",\"price\":\"200\",\"year\":\"2021\"}\n]\n</code></pre>"},{"location":"javascript/base/#where","title":"WHERE","text":"<pre><code>const data = await base.query('select name, price from Bill where year = 2021')\noutput.text(data)\n</code></pre> <p>Result</p> <pre><code>[\n    {\"name\":\"Bob\",\"price\":\"300\"},\n    {\"name\":\"Tom\",\"price\":\"200\"},\n    {\"name\":\"Jane\",\"price\":\"200\"}\n]\n</code></pre>"},{"location":"javascript/base/#group-by","title":"GROUP BY","text":"<pre><code>const data = await base.query('select name, price from Bill where year = 2021')\noutput.text(data)\n</code></pre> <p>Result</p> <pre><code>[\n    {\"price\":\"300\",\"year\":2019,\"name\":\"Bob\"},\n    {\"price\":\"100\",\"year\":2019,\"name\":\"Tom\"},\n    {\"name\":\"Tom\",\"price\":\"100\",\"year\":2020},\n    {\"price\":\"200\",\"year\":2020,\"name\":\"Jane\"},\n    {\"name\":\"Bob\",\"price\":\"300\",\"year\":2021},\n    {\"name\":\"Tom\",\"price\":\"200\",\"year\":2021},\n    {\"name\":\"Jane\",\"price\":\"200\",\"year\":2021}\n]\n</code></pre>"},{"location":"javascript/base/#distinct","title":"DISTINCT","text":"<pre><code>const data = await base.query('select distinct name from Bill')\noutput.text(data)\n</code></pre> <p>Result</p> <pre><code>[\n    {\"name\":\"Bob\"},\n    {\"name\":\"Jane\"},\n    {\"name\":\"Tom\"}\n]\n</code></pre>"},{"location":"javascript/context/","title":"Context object","text":"<p>When the script runs, the context object provides the context. The usage is as follows:</p> <pre><code>base.context.currentTable // The name of the child table that the current user is viewing when the user runs a script\nbase.context.currentRow // When a user runs a script, the line where the current cursor is located\n</code></pre>"},{"location":"javascript/output/","title":"Output","text":""},{"location":"javascript/output/#output-object","title":"Output object","text":"<p>Output object supports output strings in text or Markdown format.</p>"},{"location":"javascript/output/#text","title":"Text","text":"<pre><code>const table = base.getActiveTable();\noutput.text(table.name);\n</code></pre>"},{"location":"javascript/output/#markdown","title":"Markdown","text":"<pre><code>const table = base.getActiveTable();\noutput.markdown(`##### ${table.name}`);\n</code></pre>"},{"location":"javascript/query-sentences/","title":"Query-Statements","text":"<p>The table query will become simpler and more efficiency by using the sql-like statements as a paramter in base.filter() function. In different column types, there are a little differences in the query method and the format of input statement. </p>"},{"location":"javascript/query-sentences/#operators-of-query-method","title":"Operators of query method","text":"<ul> <li>greater-less query:  &gt;\uff0c &gt;\uff0c =\uff0c \\&lt;\uff0c \\&lt;=</li> <li>equal-unequal query:  =,  \\&lt;&gt;</li> <li>computation: +, -, *, /, ^, %</li> </ul>"},{"location":"javascript/query-sentences/#overview","title":"Overview","text":"<p>Here is an example based on the code <code>queryset = base.filter(\"Table1\", \"age&gt;18\")</code> </p> <ul> <li>age: column name</li> <li>&gt;: operator</li> <li>18: parameter</li> </ul> Data structure Column type Format of greater-less query Format of equal-unequal query computation String Text, Long Text, URL,Email, Single Select Unsupported String Unsupported List Multiple Select Unsupported String Unsupported Number Number int, float int, float, and empty string \"\" Supported Date Date, Created time,  Last modified time Patterns: YYYY-MM-DD, YYYY-MM-DD hh:mm, YYYY-MM-DD hh:mm:ss Same patterns as greater-less query Unsupported Boolean Checkbox Unsupported true, false and empty string \"\", (case-insensitive) Unsupported"},{"location":"javascript/query-sentences/#examples","title":"Examples","text":""},{"location":"javascript/query-sentences/#string-based-column","title":"String-based Column","text":"<ul> <li>Column types include Text, Long Text, URL, Email, Checkbox.</li> </ul> <pre><code># 1. equal-unequal query\nbase.filter('Table1', 'view_name', \"column_name=hello world\")\nbase.filter('Table1', 'view_name', \"column_name!=''\")\n</code></pre>"},{"location":"javascript/query-sentences/#list-based-column","title":"List-based Column","text":"<ul> <li>Column types include Multiple Select</li> </ul> <pre><code># equal-unequal query\nbase.filter('Table1','view_name', \"column_name=A and column_name=B\") # Find the rows which contains both 'A' and 'B'\n</code></pre>"},{"location":"javascript/query-sentences/#number-based-column","title":"Number-based Column","text":"<ul> <li>Column types include Number</li> </ul> <pre><code># 1. greater-less query\nbase.filter('Table1', 'view_name', \"column_name&gt;18\")\nbase.filter('Table1', 'view_name', \"column_name&gt;-10 and column_name&lt;=0\")\n\n# 2. equal-unequal query\nbase.filter('Table1', 'view_name',\"column_name&lt;&gt;20\")\nbase.filter('Table1', 'view_name', \"column_name=0\")\nbase.filter('Table1', 'view_name',\"column_name=''\")\n</code></pre> <ul> <li>Computation</li> </ul> <pre><code>base.filter('Table1', 'view_name', \"column_name+3&gt;18\")\nbase.filter('Table1', 'view_name', \"column_name*2=18\")\nbase.filter('Table1', 'view_name', \"column_name-2=18\")\nbase.filter('Table1', 'view_name', \"column_name/2=18\")\nbase.filter('Table1', 'view_name', \"column_name^2=18\")\nbase.filter('Table1', 'view_name', \"column_name%2=1\")\n</code></pre>"},{"location":"javascript/query-sentences/#date-based-column","title":"Date-based Column","text":"<ul> <li>Column types include Date, Created time, Last modified time</li> </ul> <pre><code># 1. greater-less query\nbase.filter('Table1', 'view_name', \"column_name&gt;'2020-1-30'\")\nbase.filter('Table1', 'view_name', \"column_name&gt;='2019-1-1 5:30' and column_name&lt;='2019-5-1 6:00'\")\n\n# 2. equal-unequal query\nbase.filter('Table1', 'view_name', \"column_name='2020-1-1 10:59:59'\")\nbase.filter('Table1', 'view_name', \"column_name!=''\")\n</code></pre> <p>Note that please use the quotes \"\" when making the date-time query</p>"},{"location":"javascript/query-sentences/#boolean-based-column","title":"Boolean-based Column","text":"<ul> <li>Column types include Checkbox</li> </ul> <pre><code># equal-unequal query\nbase.filter('Table1', 'view_name','column_name=False') # Same as base.filter('Table1', \"column_name=''\")\nbase.filter('Table1', 'view_name', \"column_name=True\")\n</code></pre>"},{"location":"javascript/queryset/","title":"Queryset","text":""},{"location":"javascript/queryset/#queryset-object","title":"QuerySet object","text":"<p>The return value of the base.filter function, this object provides some methods to simplify the operation of the filterd data</p>"},{"location":"javascript/queryset/#querysetall","title":"querySet.all","text":"<p>Returns all filtered data in the form of a list</p>"},{"location":"javascript/queryset/#example","title":"Example","text":"<pre><code>const list = querySet.all();\n</code></pre>"},{"location":"javascript/queryset/#querysetcount","title":"querySet.count","text":"<p>Returns the number of filtered rows</p>"},{"location":"javascript/queryset/#example_1","title":"Example","text":"<pre><code>const count = querySet.count();\n</code></pre>"},{"location":"javascript/queryset/#querysetlast","title":"querySet.last","text":"<p>Return the last filtered data</p>"},{"location":"javascript/queryset/#example_2","title":"Example","text":"<pre><code>const row = querySet.last();\n</code></pre>"},{"location":"javascript/queryset/#querysetfirst","title":"querySet.first","text":"<p>Return the first filtered data</p>"},{"location":"javascript/queryset/#example_3","title":"Example","text":"<pre><code>const row = querySet.first();\n</code></pre>"},{"location":"javascript/queryset/#querysetdelete","title":"querySet.delete","text":"<p>Delete all filtered rows and return the number of successfully deleted</p>"},{"location":"javascript/queryset/#example_4","title":"Example","text":"<pre><code>const count = querySet.delete();\n</code></pre>"},{"location":"javascript/queryset/#querysetupdate","title":"querySet.update","text":"<p>Modify the row data and return the updated data</p>"},{"location":"javascript/queryset/#example_5","title":"Example","text":"<pre><code>// Modify the contents of the Name column of all filtered rows to xxxx\nconst rows = querySet.update({Name: 'xxxx'});\n</code></pre>"},{"location":"javascript/queryset/#querysetfilter","title":"querySet.filter","text":"<p>Further filtering, return a querySet object</p>"},{"location":"javascript/queryset/#example_6","title":"Example","text":"<pre><code>// Filter out the rows with the value of Tom in the Name column of the querySe\nconst querySet1 = querySet.filter('Name = \"Tom\"');\n</code></pre>"},{"location":"javascript/queryset/#querysetget","title":"querySet.get","text":"<p>Get a piece of data in the querySet that meets the conditions, and return a row</p>"},{"location":"javascript/queryset/#example_7","title":"Example","text":"<pre><code>// Get the first data of Tom in the Name column of the querySet\nconst row = querySet.get('Name = \"Tom\"');\n</code></pre>"},{"location":"javascript/utils/","title":"Utility functions","text":"<p>Utility functions help you to work with data in SeaTable.</p>"},{"location":"javascript/utils/#formatdate","title":"formatDate","text":"<p>Format date to 'YYYY-MM-DD' to be used in a date column.</p>"},{"location":"javascript/utils/#example","title":"Example","text":"<pre><code>let date = new Date();\nlet formatDate = base.utils.formatDate(date);\n\noutput.text(formatDate); // 2020-08-20\n</code></pre>"},{"location":"javascript/utils/#formatdatewithminutes","title":"formatDateWithMinutes","text":"<p>Format date to 'YYYY-MM-DD HH:mm' to be used in a date column.</p>"},{"location":"javascript/utils/#example_1","title":"Example","text":"<pre><code>let date = new Date();\nlet formatDate = base.utils.formatDateWithMinutes(date);\n\noutput.text(formatDate); // 2020-08-20 14:00\n</code></pre>"},{"location":"javascript/utils/#lookupandcopy","title":"lookupAndCopy","text":"<pre><code>base.utils.lookupAndCopy(targetTable, targetColumn, targetColumnToCompare, sourceTableName, sourceColumnName, sourceColumnToCompare = null);\n</code></pre> <p>Similar to the vlookup function in Excel. Find a matching row in the source table for each row of the target table, and then copy the data of the specified cell of the matching row to the specified cell of the target row.</p> <p>For example, we have a source table that contains the correspondence between user names and email addresses:</p> Name Email xxx xxxx yyy yyyy <p>The target table only has the user names</p> Name Email xxx yyy <p>We need to copy the Email information in the source table to the target table, then this function can be used.</p>"},{"location":"javascript/utils/#example_2","title":"Example","text":"<pre><code>  // Match the rows with the same content in the Name column of Table1 and Table2, copy the contents of the Email column of the row in Table1 to the Email column of the corresponding row in Table2\n  base.utils.lookupAndCopy('Table2', 'Email', 'Name', 'Table1', 'Name');\n\n  // Match the rows with the same content in the Name column in Table1 and the Name1 column in Table2, and copy the contents of the Email column of the row in Table1 to the Email1 column of the corresponding row in Table2\n  base.utils.lookupAndCopy('Table2', 'Email1', 'Name1', 'Table1', 'Email', 'Name');\n</code></pre>"},{"location":"javascript/utils/#query","title":"query","text":"<p>Filter and summary the table data by SQL like statements</p>"},{"location":"javascript/utils/#example_3","title":"Example","text":"<pre><code> // Filter out the rows where the sum of the three columns 'number', 'number1', and 'number2' is greater than 5 then sum the number and number2 columns in these rows, return {number: 12, number2: 23}\n base.utils.query('Table1', 'View_name', 'select sum(number), sum(number2) where number + number1 + number2 &gt; 5');\n</code></pre>"},{"location":"javascript-api/","title":"JavaScript API","text":"<p>JavaScript API encapsulates SeaTable Server Restful API. You can call it in your front-end page or Node.js program.</p> <p>Note: JavaScript API cannot be used for scripts in SeaTable bases. For script programming, please refer to another document.</p>"},{"location":"javascript-api/#reference","title":"Reference","text":"<p>Data structure of object in SeaTable:</p> <ul> <li>Data structure</li> </ul> <p>SeaTable APIs:</p> <ul> <li>Base</li> <li>Query</li> <li>Rows</li> <li>Links</li> <li>Columns</li> <li>Constants: Some constant definitions</li> </ul> <p>To use SeaTable APIs, you should first initialize a base object and call <code>base.auth()</code>. <code>base.auth()</code> is an async function, which needs to be executed in async functions. Other APIs all return a promise object. There are two ways to use them</p> <p>The first way:</p> <pre><code>base.listViews(tableName).then(views =&gt; {\n  // Use views to complete the requirements\n}).catch(error =&gt; {\n  // Exception handling\n})\n</code></pre> <p>The second way:</p> <pre><code>try {\n  const views = await base.listViews(tableName);\n  // Use views to complete the requirements\n} catch (error) {\n  // Exception handling\n}\n</code></pre> <p>SeaTable API Errors</p> <ul> <li>400 Params invalid</li> <li>403 Permission denied</li> <li>413 exceed limit</li> <li>500 Internal Server Error</li> </ul>"},{"location":"javascript-api/base/","title":"Base object","text":"<p>Base represents a table. You can use the api token of the form to obtain the authorization to read and write the base. This token can be generated directly on the web side.</p>"},{"location":"javascript-api/base/#get-authorization","title":"Get authorization","text":"<p>Use the API Token of the base to get access authorization.</p>"},{"location":"javascript-api/base/#example","title":"Example","text":"<pre><code>import { Base } from 'seatable-api';\n\nconst config = {\n  server: 'https://cloud.seatable.cn',\n  APIToken: 'c3c75dca2c369849455a39f4436147639cf02b2d'\n};\n\nconst base = new Base(config);\nawait base.auth()\n</code></pre>"},{"location":"javascript-api/base/#metadata","title":"Metadata","text":""},{"location":"javascript-api/base/#get-metadata","title":"Get metadata","text":"<p>Get base metadata information</p> <pre><code>base.getMetadata();\n</code></pre>"},{"location":"javascript-api/base/#example_1","title":"Example","text":"<pre><code>const metadata = await base.getMetadata();\n</code></pre> <p>Return</p> <pre><code>{\n    'tables': [{\n        '_id': '4krH',\n        'name': 'Contact',\n        'is_header_locked': False,\n        'columns': [{\n            'key': '0000',\n            'type': 'text',\n            'name': 'Name',\n            'editable': True,\n            'width': 200,\n            'resizable': True,\n            'draggable': True,\n            'data': None,\n            'permission_type': '',\n            'permitted_users': []\n        }, {\n            'key': 'M31F',\n            'type': 'text',\n            'name': 'Email',\n            'editable': True,\n            'width': 200,\n            'resizable': True,\n            'draggable': True,\n            'data': None,\n            'permission_type': '',\n            'permitted_users': []\n        }],\n        'views': [{\n            '_id': '0000',\n            'name': 'Default view',\n            'type': 'table',\n            'is_locked': False,\n            'filter_conjunction': 'And',\n            'filters': [],\n            'sorts': [],\n            'groupbys': [],\n            'group_rows': [],\n            'groups': [],\n            'colorbys': {},\n            'hidden_columns': [],\n            'rows': [],\n            'formula_rows': {},\n            'link_rows': {},\n            'summaries': {},\n            'colors': {}\n        }]\n    }]\n}\n</code></pre>"},{"location":"javascript-api/base/#table","title":"Table","text":""},{"location":"javascript-api/base/#add-table","title":"add table","text":"<p>Add a table into a base</p> <pre><code>base.addTable(table_name, lang='en')\n</code></pre> <ul> <li>table_name: The name of the sub-table to be added</li> <li>lang: languages, default by English ('en'), currently support English('en') and Chinese('zh-cn')</li> </ul>"},{"location":"javascript-api/base/#example_2","title":"Example","text":"<pre><code>await base.addTable('Investigation', lang='zh-cn')\n</code></pre>"},{"location":"javascript-api/base/#operation-on-base","title":"Operation on Base","text":"<p>The Base object provides interfaces for operating rows and columns, uploading and downloading files, etc. Please refer to the following documents</p> <ul> <li>Rows</li> <li>Links</li> <li>Columns</li> <li>Query with SQL</li> </ul>"},{"location":"javascript-api/columns/","title":"Column","text":""},{"location":"javascript-api/columns/#list-columns","title":"List columns","text":"<p>List all rows of the table/view</p> <pre><code>base.listColumns(table_name, view_name='')\n</code></pre>"},{"location":"javascript-api/columns/#example","title":"Example","text":"<pre><code>const columns1 = await base.listColumns('Table1')\nconst columns2 = await base.listColumns('Table1', view_name='default')\n</code></pre>"},{"location":"javascript-api/columns/#insert-column","title":"Insert column","text":"<p>Insert/Append column</p> <pre><code>base.insertColumn(table_name, column_name, column_type, column_key='', column_data='')\n</code></pre> <ul> <li>column_key: the key of column after which the new column will be inserted, it will be appended to the last column by default</li> <li>column_type: please refer to constants</li> <li>column_data: config info of column, required for link-type column, optional for other type columns</li> </ul>"},{"location":"javascript-api/columns/#example_1","title":"Example","text":"<pre><code>import { ColumnTypes } from 'seatable-api';\nawait base.insertColumn('Table1', 'seatable-api', ColumnTypes.TEXT)\nawait base.insertColumn('Table1', 'seatable-api', ColumnTypes.TEXT, '0000')\nawait base.insertColumn('Table1', 'Link1', ColumnTypes.LINK, column_data={\n        'table':'Table1',\n        'other_table':'Test_User'\n    })\n</code></pre>"},{"location":"javascript-api/columns/#rename-column","title":"Rename column","text":"<p>Rename a column</p> <pre><code>base.renameColumn(table_name, column_key, new_column_name)\n</code></pre>"},{"location":"javascript-api/columns/#example_2","title":"Example","text":"<pre><code>await base.renameColumn('Table1', 'kSiR', 'new-seatable-api')\n</code></pre>"},{"location":"javascript-api/columns/#resize-column","title":"Resize column","text":"<p>Set a column width</p> <pre><code>base.resizeColumn(table_name, column_key, new_column_width)\n</code></pre>"},{"location":"javascript-api/columns/#example_3","title":"Example","text":"<p>The default width of a column is 200, if you need to adjust the column width, such as 500</p> <pre><code>await base.resizeColumn('Table1', 'asFV', 500)\n</code></pre>"},{"location":"javascript-api/columns/#freeze-column","title":"Freeze column","text":"<p>Freeze a column</p> <pre><code>base.freezeColumn(table_name, column_key, frozen)\n</code></pre> <p>frozen: true/false</p>"},{"location":"javascript-api/columns/#example_4","title":"Example","text":"<pre><code>await base.freezeColumn('Table1', '0000', true)\n</code></pre>"},{"location":"javascript-api/columns/#move-column","title":"Move column","text":"<pre><code>base.moveColumn(table_name, column_key, target_column_key)\n</code></pre> <ul> <li> <p>column_key:  the key of the column you want to move</p> </li> <li> <p>target_column_key:  is the key of the anchor column, the moved column will be moved to the right of the column</p> </li> </ul>"},{"location":"javascript-api/columns/#example_5","title":"Example","text":"<pre><code>await base.moveColumn('Table1', 'loPx', '0000')\n</code></pre> <p>In this example, the 'loPx' column will be moved to the right of the '0000' column</p>"},{"location":"javascript-api/columns/#modify-column-type","title":"Modify column type","text":"<p>Transform a column type</p> <pre><code>base.modifyColumnType(table_name, column_key, new_column_type)\n</code></pre> <p>column_type please refer to constants</p>"},{"location":"javascript-api/columns/#example_6","title":"Example","text":"<pre><code>import { ColumnTypes } from 'seatable-api';\n\nawait base.modifyColumnType('Table1', 'nePI', ColumnTypes.NUMBER)\n</code></pre>"},{"location":"javascript-api/columns/#add-column-options","title":"Add column options","text":"<p>Used by single-select or multiple-select type columns</p> <pre><code>base.addColumnOptions(table_name, column, options)\n</code></pre>"},{"location":"javascript-api/columns/#example_7","title":"Example","text":"<pre><code>await base.addColumnOptions('Table1', 'My choices', [\n        {\"name\": \"ddd\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n        {\"name\": \"eee\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n        {\"name\": \"fff\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n])\n</code></pre>"},{"location":"javascript-api/columns/#add-column-cascade-settings","title":"Add column cascade settings","text":"<p>Used by single-select column, to add a limitation of child column options according to the option of parent column</p> <pre><code>base.addColumnCascadeSettings(table_name, child_column, parent_column, cascade_settings)\n</code></pre> <ul> <li>child_column: name of child column</li> <li>parent_column: name of parent column</li> </ul>"},{"location":"javascript-api/columns/#example_8","title":"Example","text":"<pre><code>await base.addColumnCascadeSettings(\"Table1\", \"single-op-col-c\", \"single-op-col\", {\n  \"aaa\": [\"aaa-1\", \"aaa-2\"], # If \u201caaa\u201d is selected by parent column, the available options of child column are \"aaa-1 and aaa-2\"\n  \"bbb\": [\"bbb-1\", \"bbb-2\"],\n  \"ccc\": [\"ccc-1\", \"ccc-2\"]\n})\n</code></pre>"},{"location":"javascript-api/columns/#delete-column","title":"Delete column","text":"<p>Delete a column</p> <pre><code>base.deleteColumn(table_name, column_key)\n</code></pre>"},{"location":"javascript-api/columns/#example_9","title":"Example","text":"<pre><code>await base.deleteColumn('Table1', 'bsKL')\n</code></pre>"},{"location":"javascript-api/constants/","title":"Constants","text":"<p>In the script there may be some constants we need to know</p>"},{"location":"javascript-api/constants/#columntypes","title":"ColumnTypes","text":"<p>Column type, when insert/add columns, change column types, etc. need to be used</p> <pre><code>import { ColumnTypes } from 'seatable-api';\n\nColumnTypes.NUMBER              // number\nColumnTypes.TEXT                // text\nColumnTypes.LONG_TEXT           // long text\nColumnTypes.CHECKBOX            // checkbox\nColumnTypes.DATE                // date &amp; time\nColumnTypes.SINGLE_SELECT       // single select\nColumnTypes.MULTIPLE_SELECT     // multiple \nColumnTypes.IMAGE               // image\nColumnTypes.FILE                // file\nColumnTypes.COLLABORATOR        // collaborator\nColumnTypes.LINK                // link to \nColumnTypes.FORMULA             // formula\nColumnTypes.CREATOR             // creator\nColumnTypes.CTIME               // create time\nColumnTypes.LAST_MODIFIER       // last modifier\nColumnTypes.MTIME               // modify time\nColumnTypes.GEOLOCATION         // geolocation\nColumnTypes.AUTO_NUMBER         // auto munber\nColumnTypes.URL                 // URL\n</code></pre>"},{"location":"javascript-api/links/","title":"Links","text":""},{"location":"javascript-api/links/#get-linked-records","title":"Get linked records","text":"<p>List the linked records of rows. You can get the linked records of multiple rows.</p> <pre><code>base.getLinkedRecords(table_id, link_column_key, rows)\n</code></pre> <ul> <li>table_id: the id of link table</li> <li>link_column_key: the column key of the link column of link table ( not link_id )</li> <li>rows: a list, each item of the which contains a row info including row_id, offset (defualt by 0) and limit (default by 10) of link table</li> </ul>"},{"location":"javascript-api/links/#example","title":"Example","text":"<pre><code>base.getLinkedRecords('0000', '89o4', [\n  {'row_id': 'FzNqJxVUT8KrRjewBkPp8Q', 'limit': 2, 'offset': 0},\n  {'row_id': 'Jmnrkn6TQdyRg1KmOM4zZg', 'limit': 20}\n])\n\n// a key-value data structure returned as below\n// key: row_id of link table\n// value: a list which includes the row info of linked table\n{\n  'FzNqJxVUT8KrRjewBkPp8Q': [\n    {'row_id': 'LocPgVvsRm6bmnzjFDP9bA', 'display_value': '1'},                            \n    {'row_id': 'OA6x7CYoRuyc2pT52Znfmw', 'display_value': '3'},\n    ...\n  ],\n  'Jmnrkn6TQdyRg1KmOM4zZg': [\n    {'row_id': 'LocPgVvsRm6bmnzjFDP9bA', 'display_value': '1'},     \n    {'row_id': 'OA6x7CYoRuyc2pT52Znfmw', 'display_value': '3'},\n    ...\n  ]\n}\n</code></pre>"},{"location":"javascript-api/links/#add-link","title":"Add link","text":"<p>Add links, link other table records</p> <pre><code>base.addLink(link_id, table_name, other_table_name, row_id, other_row_id)\n</code></pre> <ul> <li>link_id:  link_id in the data attribute of the link column</li> <li>table_name: the name of the link table</li> <li>other_table_name: the name of the linked table</li> <li>row_id: id of link row</li> <li>other_row_id: id of the linked row </li> </ul>"},{"location":"javascript-api/links/#example_1","title":"Example","text":"<pre><code>await base.addLink('5WeC', 'real-img-files', 'contact', 'CGtoJB1oQM60RiKT-c5J-g', 'PALm2wPKTCy-jdJNv_UWaQ')\n</code></pre>"},{"location":"javascript-api/links/#update-link","title":"Update link","text":"<p>Modify the info of link-type column</p> <pre><code>base.updateLink(link_id, table_id, other_table_id, row_id, other_rows_ids)\n</code></pre> <ul> <li>link_id:  link_id in the data attribute of the link column</li> <li>table_id: the id of the link table</li> <li>other_table_id:  the id of the linked table</li> <li>row_id:   id of link row</li> <li>other_rows_ids: ids of the linked row </li> </ul>"},{"location":"javascript-api/links/#example_2","title":"Example","text":"<pre><code>await base.updateLink(\n        link_id='r4IJ',\n        table_id='0000',\n        other_table_id='kFoO',\n        row_id='BXhEm9ucTNu3FjupIk7Xug',\n        other_rows_ids=[\n          'exkb56fAT66j8R0w6wD9Qg',\n          'DjHjwmlRRB6WgU9uPnrWeA'\n        ]\n    )\n</code></pre>"},{"location":"javascript-api/links/#batch-update-links","title":"Batch update links","text":"<p>Batch update infos of link-type columns</p> <pre><code>base.batchUpdateLinks(link_id, table_id, other_table_id, row_id_list, other_rows_ids_map)\n</code></pre>"},{"location":"javascript-api/links/#example_3","title":"Example","text":"<pre><code>link_id = \"WaW5\"\ntable_id =\"0000\"\nother_table_id = \"jtsf\"\nrow_id_list = [\"fRLglslWQYSGmkU7o6KyHw\",\"eSQe9OpPQxih8A9zPXdMVA\",\"FseN8ygVTzq1CHDqI4NjjQ\"]\nother_rows_ids_map = {\n        \"FseN8ygVTzq1CHDqI4NjjQ\":[\"OcCE8aX8T7a4dvJr-qNh3g\",\"JckTyhN0TeS8yvH8D3EN7g\"],\n        \"eSQe9OpPQxih8A9zPXdMVA\":[\"cWHbzQiTR8uHHzH_gVSKIg\",\"X56gE7BrRF-i61YlE4oTcw\"],\n        \"fRLglslWQYSGmkU7o6KyHw\":[\"MdfUQiWcTL--uMlrGtqqgw\",\"E7Sh3FboSPmfBlDsrj_Fhg\",\"UcZ7w9wDT-uVq4Ohtwgy9w\"]\n}\n\nawait base.batchUpdateLinks(link_id, table_id, other_table_id, row_id_list, other_rows_ids_map)\n</code></pre>"},{"location":"javascript-api/links/#remove-link","title":"Remove link","text":"<p>Delete the link row</p> <pre><code>base.removeLink(link_id, table_name, other_table_name, row_id, other_row_id)\n</code></pre>"},{"location":"javascript-api/links/#example_4","title":"Example","text":"<pre><code>await base.removeLink('5WeC', 'real-img-files', 'contact', 'CGtoJB1oQM60RiKT-c5J-g', 'PALm2wPKTCy-jdJNv_UWaQ')\n</code></pre>"},{"location":"javascript-api/links/#get-link-id","title":"Get link id","text":"<p>Get the link id by column name</p> <pre><code>base.getColumnLinkId(columns, column_name)\n</code></pre>"},{"location":"javascript-api/links/#example_5","title":"Example","text":"<pre><code>const columns = await base.listColumns('Table1'); // return table's columns\nconst linkId = await base.getColumnLinkId(columns, 'Record') // return the link id such as 'aHL2'\n</code></pre>"},{"location":"javascript-api/query/","title":"Query with SQL","text":""},{"location":"javascript-api/query/#query","title":"Query","text":"<p>Use sql to query a base</p> <pre><code>base.query(sql)\n</code></pre> <ul> <li>sql: sql statement</li> </ul> <p>Note: Only 100 results will be returned by default. To get more results, add <code>limit</code> in SQL statement.</p> <p>Possible exceptions</p> <ul> <li>ValueError: sql can not be empty</li> <li>ConnectionError: network error</li> <li>Exception: no such table</li> <li>Exception: no such column</li> <li>Exception: columns in group by should match columns in select</li> </ul>"},{"location":"javascript-api/query/#example","title":"Example","text":""},{"location":"javascript-api/query/#basic","title":"Basic","text":"<pre><code>await base.query('select name, price, year from Bill')\n</code></pre> <p>Result</p> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob', 'price': 300, 'year': 2019},\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300, 'year': 2021},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom', 'price': 100, 'year': 2019},\n    {'_id': 'NxeaB5pDRFKOItUs_Ugxug', 'name': 'Tom', 'price': 100, 'year': 2020},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200, 'year': 2021},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane', 'price': 200, 'year': 2020},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200, 'year': 2021}\n]\n</code></pre>"},{"location":"javascript-api/query/#where","title":"WHERE","text":"<pre><code>await base.query('select name, price from Bill where year = 2021 ')\n</code></pre> <p>Result</p> <pre><code>[\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200}\n]\n</code></pre>"},{"location":"javascript-api/query/#order-by","title":"ORDER BY","text":"<pre><code>await base.query('select name, price, year from Bill order by year')\n</code></pre> <p>\u7ed3\u679c</p> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob', 'price': 300, 'year': 2019},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom', 'price': 100, 'year': 2019},\n    {'_id': 'NxeaB5pDRFKOItUs_Ugxug', 'name': 'Tom', 'price': 100, 'year': 2020},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane', 'price': 200, 'year': 2020},\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300, 'year': 2021},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200, 'year': 2021},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200, 'year': 2021}\n]\n</code></pre>"},{"location":"javascript-api/query/#group-by","title":"GROUP BY","text":"<pre><code>await base.query('select name, sum(price) from Bill group by name')\n</code></pre> <p>Result</p> <pre><code>[\n    {'SUM(price)': 600, 'name': 'Bob'},\n    {'SUM(price)': 400, 'name': 'Tom'},\n    {'SUM(price)': 400, 'name': 'Jane'}\n]\n</code></pre>"},{"location":"javascript-api/query/#distinct","title":"DISTINCT","text":"<pre><code>await base.query('select distinct name from Bill')\n</code></pre> <p>Result</p> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob'},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom'},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane'}\n]\n</code></pre>"},{"location":"javascript-api/rows/","title":"Row","text":""},{"location":"javascript-api/rows/#list-rows","title":"List rows","text":"<p>Get all rows of the table</p> <pre><code>base.listRows(table_name, view_name=None, order_by='', desc='', start='', limit='')\n</code></pre> <p>\u5176\u4e2d</p> <ul> <li>order_by:  column name based on which ordering the data</li> <li>start: start position of rows</li> <li>limit:  number of rows returned</li> </ul>"},{"location":"javascript-api/rows/#example","title":"Example","text":"<pre><code>const rows1 = await base.listRows('Table1')\nconst rows2 = await base.listRows('Table1', view_name='default', order_by='\u5e74\u9f84', desc=true, start=5, limit=20)\n</code></pre>"},{"location":"javascript-api/rows/#get-row","title":"Get row","text":"<p>Get a row of the table by row ID.</p> <pre><code>base.getRow(table_name, row_id)\n</code></pre>"},{"location":"javascript-api/rows/#example_1","title":"Example","text":"<pre><code>const row = await base.getRow('Table1', 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre>"},{"location":"javascript-api/rows/#append-row","title":"Append row","text":"<p>Append a row</p> <pre><code>base.appendRow(table_name, row_data)\n</code></pre>"},{"location":"javascript-api/rows/#example_2","title":"Example","text":"<pre><code>row_data = {\n    \"Name\": \"I am new Row\"\n}\n\nawait base.appendRow('Table1', row_data)\n</code></pre>"},{"location":"javascript-api/rows/#insert-row","title":"Insert row","text":"<p>Insert a row</p> <pre><code>base.insertRow(table_name, row_data, anchor_row_id)\n</code></pre> <ul> <li>anchor_row_id: the row under which the new row will be inserted</li> </ul>"},{"location":"javascript-api/rows/#example_3","title":"Example","text":"<pre><code>row_data = {\n    \"Name\": \"I am new Row\"\n}\n\nawait base.insertRow('Table1', row_data, 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre>"},{"location":"javascript-api/rows/#batch-append-rows","title":"Batch append rows","text":"<p>Batch append rows</p> <pre><code>base.batchAppendRows(table_name, rows_data)\n</code></pre>"},{"location":"javascript-api/rows/#example_4","title":"Example","text":"<pre><code>rows_data = [{\n                'Name': 'test batch',\n                'content': 'Yes'\n            }, {\n                'Name': 'test batch',\n                'content': 'Yes'\n            }, {\n                'Name': 'test batch',\n                'content': 'Yes'\n            }]\nawait base.batchAppendRows('Table6', rows_data)\n</code></pre>"},{"location":"javascript-api/rows/#update-row","title":"Update row","text":"<p>Update a row</p> <pre><code>base.updateRow(table_name, row_id, row_data)\n</code></pre>"},{"location":"javascript-api/rows/#example_5","title":"Example","text":"<pre><code>row_data = {\n    \"dcXS\": \"123\"\n}\nawait base.updateRow('Table1', 'U_eTV7mDSmSd-K2P535Wzw', row_data)\n</code></pre>"},{"location":"javascript-api/rows/#batch-update-rows","title":"Batch update rows","text":"<p>Batch update rows</p> <pre><code>base.batchUpdateRows(table_name, rows_data)\n</code></pre>"},{"location":"javascript-api/rows/#example_6","title":"Example","text":"<pre><code>updates_data = [\n        {\n            \"row_id\": \"fMmCFyoxT4GN5Y2Powbl0Q\",\n            \"row\": {\n                \"Name\": \"Ranjiwei\",\n                \"age\": \"36\"\n            }\n        },\n        {\n            \"row_id\": \"cF5JTE99Tae-VVx0BGT-3A\",\n            \"row\": {\n                \"Name\": \"Huitailang\",\n                \"age\": \"33\"\n            }\n        },\n        {\n            \"row_id\": \"WP-8rb5PSUaM-tZRmTOCPA\",\n            \"row\": {\n                \"Name\": \"Yufeng\",\n                \"age\": \"22\"\n            }\n        }\n    ]\nawait base.batchUpdateRows('Table1', rows_data=updates_data)\n</code></pre>"},{"location":"javascript-api/rows/#delete-row","title":"Delete row","text":"<p>Delete a row</p> <pre><code>base.deleteRow(table_name, row_id)\n</code></pre>"},{"location":"javascript-api/rows/#example_7","title":"Example","text":"<pre><code>await base.deleteRow('Table1', 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre>"},{"location":"javascript-api/rows/#batch-delete-rows","title":"Batch delete rows","text":"<p>Batch delete rows</p> <pre><code>base.batchDeleteRows(table_name, row_ids)\n</code></pre>"},{"location":"javascript-api/rows/#example_8","title":"Example","text":"<pre><code>const del_rows = rows.slice(0, 3);\nconst row_ids = del_rows.map(row =&gt; row._id);\nawait base.batchDeleteRows('Table1', row_ids)\n</code></pre>"},{"location":"plugins/","title":"SeaTable plugin development process","text":"<p>In this guide, we will demonstrate step by step how to write a plugin to SeaTable. This plugin can display the basic information of the base, including</p> <ul> <li>Number of tables</li> <li>Number of records</li> <li>Number of collaborators</li> </ul> <p>The code of the plugin development example is very simple. You can click this github link to get the source code.</p> <p>The plugin development process is as follows.</p>"},{"location":"plugins/#the-basic-process-of-plugin-development","title":"The basic process of plugin development","text":""},{"location":"plugins/#1-install-development-tool","title":"1. Install development tool","text":"<p>Using npm:</p> <pre><code>$ npm install -g create-dtable-plugin\n</code></pre>"},{"location":"plugins/#2-create-plugin","title":"2. Create plugin","text":"<pre><code>$ create-dtable-plugin init seatable-plugin-table-info\n</code></pre> <p>Install dependencies</p> <pre><code>$ cd seatable-plugin-table-info\n$ npm install\n</code></pre>"},{"location":"plugins/#3-modify-the-plugin-configuration","title":"3. Modify the plugin configuration","text":"<p>Modify the info.json configuration file in the plugin-config folder.</p> <pre><code>\"name\": '',                   // The name can only contain letters, numbers and underscores\n\"version\": '',                // Plugin version number\n\"display_name\": '',           // The name displayed by the plugin\n\"description\": '',            // Description of plugin\n</code></pre> <p>There is no need to add other configuration parameters, other parameters are automatically generated by the packaging tool.</p> <p>Optional operation</p> <ul> <li>Add a custom icon.png to the plugin-config folder as the icon of the plugin (it may not be provided, the default icon is used. The icon.png requires 128x128 pixels)</li> <li>Add a custom card_image.png to the plugin-config folder as the background image of the plugin icon (it may not be provided, the default background is displayed. The card_image.png requires 560x240 pixels)</li> </ul>"},{"location":"plugins/#4-modify-the-plugin-registration-function-in-the-entryjs-file","title":"4. Modify the plugin registration function in the entry.js file","text":"<p>Modify</p> <pre><code>window.app.registerPluginItemCallback('test', TaskList.execute);\n</code></pre> <p>to</p> <pre><code>window.app.registerPluginItemCallback(name, TaskList.execute);\n</code></pre> <p>The name value here is the \"name\" value in plugin-config/info.json.</p>"},{"location":"plugins/#5-add-plugin-development-configuration-file","title":"5. Add plugin development configuration file","text":"<p>There is a file setting.local.dist.js in the project src folder, copy it and name it setting.local.js</p> <p>The content of the file is as follows, and you can modify it according to the comments</p> <pre><code>const config = {\n  APIToken: \"**\",               // The apiToken of the dtable\n  server: \"**\",                 // The deployment URL of the dtable\n  workspaceID: \"**\",            // The workspaceID of the dtable\n  dtableName: \"**\",             // The name of the dtable to which the plugin\n  lang: \"**\"                    // Plugin default language type, 'en' or 'zh-cn'\n};\n</code></pre>"},{"location":"plugins/#6-start-development","title":"6. Start development","text":"<p>Run local development environment</p> <pre><code>$ npm start\n</code></pre> <p>Open localhost:3000 on the browser, you can see that the plugin dialog has been opened, and the interface function provided by the dtable-sdk library is displayed by default in the dialog 1. getTables: obtained table information of the dtable base 2. getRelatedUsers: get detailed information of dtable collaborators</p> <p>Main code and purpose</p> <ul> <li>/src/index.js: entry file for local development plugin</li> <li>/src/entry.js: follow the entry file when SeaTable is run as a plugin</li> <li>/src/app.js: the main code of the plugin</li> </ul>"},{"location":"plugins/#7-display-basic-information-of-the-table","title":"7. Display basic information of the table","text":"<p>Write a TableInfo component, this component needs to pass in two props, tables and collaborators</p> <pre><code>class TableInfo extends React.Component {\n}\n\nconst propTypes = {\n  tables: PropTypes.array.isRequired,\n  collaborators: PropTypes.array.isRequired,\n};\n\nTableInfo.propTypes = propTypes;\n\nexport default TableInfo;\n</code></pre> <p>Get the number of tables</p> <pre><code>getTablesNumber = (tables) =&gt; {\n  return (tables &amp;&amp; Array.isArray(tables)) ? tables.length : 0;\n}\n</code></pre> <p>Get the number of records</p> <pre><code>getRecords = (tables) =&gt; {\n  let recordsNumber = 0;\n  if (!tables) return recordsNumber;\n  for (let i = 0; i &lt; tables.length; i++) {\n    const table = tables[i];\n    const rows = table.rows;\n    if (rows &amp;&amp; Array.isArray(rows)) {\n      recordsNumber += rows.length;\n    }\n  }\n  return recordsNumber;\n}\n</code></pre> <p>Get the number of collaborators</p> <pre><code>renderCollaborators = (collaborators) =&gt; {\n  if (!collaborators || !Array.isArray(collaborators)) {\n    return null;\n  }\n  return collaborators.map((collaborator, index) =&gt; {\n    return (\n      &lt;div key={index} className=\"collaborator\"&gt;\n        &lt;span className=\"collaborator-avatar-container\"&gt;\n          &lt;img className=\"collaborator-avatar\" alt='' src={collaborator.avatar_url}/&gt;\n        &lt;/span&gt;\n        &lt;span className=\"collaborator-name\"&gt;{collaborator.name}&lt;/span&gt;\n      &lt;/div&gt;\n    );\n  });\n}\n</code></pre> <p>Interface rendering: the number of tables, the number of records and the number of collaborators</p> <pre><code>render() {\n  const { tables, collaborators } = this.props;\n  return (\n    &lt;div&gt;\n      &lt;div&gt;{'Number of tables: '}{this.getTablesNumber(tables)}&lt;/div&gt;&lt;br/&gt;\n      &lt;div&gt;{'Total number of records: '}{this.getRecords(tables)}&lt;/div&gt;&lt;br/&gt;\n      &lt;div&gt;{'Number of collaborators: '}{collaborators ? collaborators.length : 0}&lt;/div&gt;&lt;br/&gt;\n      &lt;div className=\"plugin-collaborators\"&gt;{this.renderCollaborators(collaborators)}&lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>In the parent component app.js, use the <code>TableInfo</code> component , modify the render function in app.js, and pass in tables and collaborators.</p> <pre><code>import TableInfo from './table-info';\n\nclass App extends React.Component{\n  let tables = this.dtable.getTables();\n  let collaborators = this.dtable.getRelatedUsers();\n  render() {\n    return (\n      &lt;Modal isOpen={showDialog} toggle={this.onPluginToggle} contentClassName=\"dtable-plugin plugin-container\" size='lg'&gt;\n        &lt;ModalHeader className=\"test-plugin-header\" toggle={this.onPluginToggle}&gt;{'Plugin'}&lt;/ModalHeader&gt;\n        &lt;ModalBody className=\"test-plugin-content\"&gt;\n          &lt;TableInfo tables={tables} collaborators={collaborators}/&gt;\n        &lt;/ModalBody&gt;\n      &lt;/Modal&gt;\n    );\n  }\n}\n</code></pre> <p>Add the css/table-info.css file and modify the style of the plugin.</p> <p>Run <code>npm start</code> again, you can see the following information on the browser localhost: 3000.</p> <pre><code>Number of tables: X\nTotal number of records: XXX\nNumber of collaborators: X\n</code></pre>"},{"location":"plugins/#8-package-upload-plugin","title":"8. Package upload plugin","text":"<ol> <li> <p>Execute <code>npm run build-plugin</code> to package the plugin, and the path of the packaged plugin is /plugin/task.zip</p> </li> <li> <p>Upload the plugin task.zip to dtable</p> </li> </ol>"},{"location":"plugins/base/","title":"dtable","text":""},{"location":"plugins/base/#init","title":"Init","text":"<p>The plugin development environment is divided into two types, the development environment and the production environment. Because of the different environments, the initialization methods are also different:</p> <ul> <li> <p>In the development environment, you need to provide the configuration file required by the plugin, which is used to initialize the plugin and obtain the data required by the plugin.</p> </li> <li> <p>In the production environment, you need to install the plugin, then the plugin can directly read the data of the base in the current browser to initialize the plugin.</p> </li> </ul>"},{"location":"plugins/base/#initialize-the-plugin","title":"Initialize the plugin","text":""},{"location":"plugins/base/#development-environment","title":"Development environment","text":"<p>Initialize the plugin in the development environment</p> <pre><code>import DTable from 'dtable-sdk';\n\nconst dtable = new DTable();\nconst settings = {\n  \"server\": \"https://cloud.seatable.cn\",\n  \"APIToken\": \"50c17897ae8b1c7c428d459fc2c379a9bc3806cc\",\n}\nawait dtable.init(config);\n</code></pre>"},{"location":"plugins/base/#production-environment","title":"Production environment","text":"<p>Initialize the plugin in the production environment</p> <pre><code>import DTable from 'dtable-sdk';\n\nconst dtable = new Dtable();\nconst dtableStore = window.app.dtableStore; // Get initialization data from the production environment\nawait dtable.initBrowser(dtableStore);\n</code></pre>"},{"location":"plugins/base/#monitoring-event-changes","title":"Monitoring event changes","text":""},{"location":"plugins/base/#subscribe-events","title":"Subscribe events","text":"Event type description use dtable-connect Indicates that a link has been established with the server, and the data loading is complete Update state and UI display local-dtable-changed Indicates that some operations have been performed locally, and the data has changed Update state and UI display remote-dtable-changed Indicates that some operations sent by the server have been performed locally, and the data has changed Update state and UI display <pre><code>import DTable from 'dtable-sdk';\n\nconst dtable = new Dtable();\ndtable.subscribe('dtable-connect', () =&gt; {...});\ndtable.subscribe('local-dtable-changed', () =&gt; {...});\ndtable.subscribe('remote-dtable-changed', () =&gt; {...});\n</code></pre>"},{"location":"plugins/base/#example","title":"Example","text":"<p>This is an initialization example in the development environment.</p> <p>Since two environments need to be compatible, the initialization operations for general plugin development are as follows:</p> <pre><code>import Dtable from 'dtable-sdk';\nimport PropTypes from 'prop-types';\n\nconst propsTypes = {\n  isDevelopment: PropTypes.bool\n};\n\nconst settings = {\n  \"server\": \"https://cloud.seatable.cn\",\n  \"APIToken\": \"50c17897ae8b1c7c428d459fc2c379a9bc3806cc\",\n};\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true\n    };\n    this.dtable = new Dtable();\n  }\n\n  async componentDidMount() {\n    const { isDevelopment } = this.props;\n    if (isDevelopment) {\n      await dtable.init(settings);\n      await this.dtable.syncWithServer();\n      this.dtable.subscribe('dtable-connect', this.resetData);\n    } else {\n      const dtableStore = window.app.dtableStore;\n      dtable.initBrowser(dtableStore);\n    }\n\n    this.dtable.subscribe('local-dtable-changed', this.resetData);\n    this.dtable.subscribe('remote-dtable-changed', this.resetData);\n  }\n\n  resetData = () =&gt; {\n    // ...\n    this.setState({isLoading: false});\n  }\n\n  render() {\n    return (\n      ...\n    );\n  }\n\n}\n</code></pre>"},{"location":"plugins/columns/","title":"Columns","text":""},{"location":"plugins/columns/#getcolumns","title":"getColumns","text":"<p>Get all the columns of the table</p> <pre><code>dtable.getColumns(table);\n</code></pre> <p>Arguments</p> <ul> <li>table: table object</li> </ul> <p>Example</p> <pre><code>const tableId = '0000';\nconst table = dtable.getTableById(tableId);\nconst columns = dtable.getColumns(table);\n</code></pre>"},{"location":"plugins/columns/#getshowncolumns","title":"getShownColumns","text":"<p>Get the contents of all displayed columns of the view (excluding hidden columns)</p> <pre><code>dtable.getShownColumns(table, view);\n</code></pre> <p>Arguments</p> <ul> <li>table: table object</li> <li>view: view objects in the table</li> </ul> <p>Example</p> <pre><code>const tableId = '0000';\nconst viewId = '0000';\nconst table = dtable.getTableById(tableId);\nconst view = dtable.getViewById(table, viewId);\nconst shownColumns = dtable.getShownColumns(table, view);\n</code></pre>"},{"location":"plugins/columns/#getcolumnsbytype","title":"getColumnsByType","text":"<p>Get all the same type of column in the table</p> <pre><code>dtable.getColumnsByType(table, type);\n</code></pre> <p>Arguments</p> <ul> <li>table:  table object</li> <li>type: get the type of column</li> </ul> <p>Example</p> <pre><code>import { CELL_TYPE } from 'dtable-sdk';\n\nconst tableId = '0000';\nconst table = dtable.getTableById(tableId);\nconst columnType = CELL_TYPE.TEXT;\nconst sameTypeColumns = dtable.getColumnsByType(table, columnType);\n</code></pre>"},{"location":"plugins/columns/#getcolumnbyname","title":"getColumnByName","text":"<p>Get column by name</p> <pre><code>dtable.getColumnByName(table, columnName);\n</code></pre> <p>Arguments</p> <ul> <li>table:  table object</li> <li>columnName: the name of the column</li> </ul> <p>Example</p> <pre><code>const tableId = '0000';\nconst table = dtable.getTableById(tableId);\nconst columnName = 'columnName';\nconst column = dtable.getColumnByName(table, columnName);\n</code></pre>"},{"location":"plugins/columns/#getcolumnbykey","title":"getColumnByKey","text":"<p>Get column by key</p> <pre><code>dtable.getColumnByKey(table, columnKey);\n</code></pre> <p>Arguments</p> <ul> <li>table:  table object</li> <li>columnKey: the key value of the column</li> </ul> <p>Example</p> <pre><code>const tableId = '0000';\nconst table = dtable.getTableById(tableId);\nconst columnKey = '0000';\nconst column = dtable.getColumnByKey(table, columnKey);\n</code></pre>"},{"location":"plugins/columns/#modifycolumndata","title":"modifyColumnData","text":"<p>Update the data attribute of the column</p> <pre><code>dtable.modifyColumnData(table, columnName, columnData);\n</code></pre> <p>Arguments</p> <ul> <li>table:  table object</li> <li>columnName: the name of the column</li> <li>columnData: the new data attribute of the column</li> </ul> <p>Example</p> <pre><code>const tableId = '0000';\nconst table = dtable.getTableById(tableId);\nconst columnName = 'dateColumn';\nconst data = {\n  format: 'YYYY-MM-DD'\n};\ndtable.modifyColumnData(table, columnName, data);\n</code></pre>"},{"location":"plugins/common/","title":"Common api","text":""},{"location":"plugins/common/#getrelatedusers","title":"getRelatedUsers","text":"<p>Get other users associated with the current base (collaborators of the table, the shared person of the table, etc.)</p> <pre><code>dtable.getRelatedUsers()\n</code></pre> <p>Example</p> <pre><code>const collaborators = dtable.getRelatedUsers();\n</code></pre>"},{"location":"plugins/common/#getcollaboratorsname","title":"getCollaboratorsName","text":"<p>Get a list of names of collaborators</p> <pre><code>dtable.getCollaboratorsName(collaborators, value)\n</code></pre> <p>Arguments</p> <ul> <li>collaborators: collaborator list in this base</li> <li>value: email list of collaborators</li> </ul> <p>Example</p> <pre><code>const collaborators = dtable.getRelatedUsers();\nconst value = ['abc@seafile.com', 'shun@seafile.com'];\nconst name = dtable.getCollaboratorsName(collaborators, value); // 'abc, shun'\n</code></pre>"},{"location":"plugins/common/#gettableformularesults","title":"getTableFormulaResults","text":"<p>Get the data in the calculation formula column of the table</p> <pre><code>dtable.getTableFormulaResults(table, rows)\n</code></pre> <p>Arguments</p> <ul> <li>table: table object</li> <li>rows: row data of the relevant data of the calculation formula column</li> </ul> <p>Example</p> <pre><code>const tableName = 'tableName';\nconst viewName = 'viewName';\nconst table = dtable.getTableByName(tableName);\nconst view = dtable.getViewByName(table, viewName);\nconst rows = dtable.getViewRows(view, table);\n\nconst formulaResult = dtable.getTableFormulaResults(table, rows);\n</code></pre>"},{"location":"plugins/common/#getviewrowscolor","title":"getViewRowsColor","text":"<p>Get the color attributes of the row data in the view</p> <pre><code>dtable.getViewRowsColor(rows, view, table)\n</code></pre> <p>Arguments</p> <ul> <li>rows: the rows of the color attribute</li> <li>view: view object</li> <li>table: table object</li> </ul> <p>Example</p> <pre><code>const tableName = 'tableName';\nconst viewName = 'viewName';\nconst table = dtable.getTableByName(tableName);\nconst view = dtable.getViewByName(table, viewName);\nconst rows = dtable.getViewRows(view, table);\n\nconst rowsColor = dtable.getViewRowsColor(rows, view, table);\n</code></pre>"},{"location":"plugins/common/#getlinkcellvalue","title":"getLinkCellValue","text":"<p>Get the id list of the row data of the table linked with the row data of other tables</p> <pre><code>dtable.getLinkCellValue(linkId, tableId, otherTableId, rowId)\n</code></pre> <p>Arguments</p> <ul> <li>linkId: the link_id value corresponding to the column</li> <li>tableId: the id value of the current table</li> <li>otherTableId: the id value of the linked table</li> <li>rowId: the id value of the row in the current table</li> </ul> <p>Example</p> <pre><code>const tableName = 'tableName';\nconst table = dtable.getTableByName(tableName);\n\nconst rows = table.rows;\nconst row = rows[0];\n\nconst columnName = 'linkColumn';\nconst linkColumn = dtable.getColumnByName(table, columnName);\nconst { link_id, table_id, other_table_id, display_column_key } = linkColumn.data;\nconst linkedTableId = table._id === table_id ? other_table_id : table_id;\n\nconst linkedRowIds = dtable.getLinkCellValue(link_id, table._id, linkedTableId, row._id);\n</code></pre>"},{"location":"plugins/common/#getlinkdisplaystring","title":"getLinkDisplayString","text":"<p>Get the content value of the linked row of the link column</p> <pre><code>dtable.getLinkDisplayString(linkedRowIds, linkedTable, displayColumnKey)\n</code></pre> <p>Arguments</p> <ul> <li>linkedRowIds: list of linked row ids</li> <li>linkedTable: linked table object</li> <li>displayColumnKey: display column key</li> </ul> <p>Example</p> <pre><code>const tableName = 'tableName';\nconst table = dtable.getTableByName(tableName);\n\nconst rows = table.rows;\nconst row = rows[0];\n\nconst columnName = 'linkColumn';\nconst linkColumn = dtable.getColumnByName(table, columnName);\nconst { link_id, table_id, other_table_id, display_column_key } = linkColumn.data;\nconst linkedTableId = table._id === table_id ? other_table_id : table_id;\n\nconst linkedRowIds = dtable.getLinkCellValue(link_id, table._id, linkedTableId, row._id);\nconst linkedTable = dtable.getTableById(linkedTableId);\n\nconst results = dtable.getLinkDisplayString(linkedRowIds, linkedTable, display_column_key);\n</code></pre>"},{"location":"plugins/common/#getnumberdisplaystring","title":"getNumberDisplayString","text":"<p>Get the string display of the number column (return user data according to different formats)</p> <pre><code>dtable.getNumberDisplayString(value, columnData)\n</code></pre> <p>Arguments</p> <ul> <li>value: the value corresponding to the number column</li> <li>columnData: the data configuration attribute of the corresponding column of the number column</li> </ul> <p>Example</p> <pre><code>const tableName = 'tableName';\nconst table = dtable.getTableByName(tableName);\nconst columnName = 'numberColumn';\nconst column = dtable.getColumnByName(table, columnName);\n\nconst value = 190203;\nconst name = dtable.getNumberDisplayString(value, column.data);\n</code></pre>"},{"location":"plugins/common/#getgeolocationdisplaystring","title":"getGeolocationDisplayString","text":"<p>Get the string display of the geolocation column (return user data according to different configuration parameters)</p> <pre><code>dtable.getGeolocationDisplayString(value, columnData)\n</code></pre> <p>Arguments</p> <ul> <li>value: the value corresponding to the geolocation column</li> <li>columnData: the data configuration attribute of the corresponding column geolocation column</li> </ul> <p>Example</p> <pre><code>const tableName = 'tableName';\nconst table = dtable.getTableByName(tableName);\nconst columnName = 'geolocationColumn';\nconst column = dtable.getColumnByName(table, columnName);\n\nconst value = {country_region: 'Germany'};\nconst name = dtable.getGeolocationDisplayString(value, column.data);\n</code></pre>"},{"location":"plugins/common/#getdurationdisplaystring","title":"getDurationDisplayString","text":"<p>Get the string display of the duration column (return user data according to different configuration parameters)</p> <pre><code>dtable.getDurationDisplayString(value, columnData)\n</code></pre> <p>Arguments</p> <ul> <li>value: the value corresponding to the duration column</li> <li>columnData: the data configuration attribute of the corresponding column of the duration column</li> </ul> <p>Example</p> <pre><code>const tableName = 'tableName';\nconst table = dtable.getTableByName(tableName);\nconst columnName = 'durationColumn';\nconst column = dtable.getColumnByName(table, columnName);\n\nconst value = '12:30';\nconst name = dtable.getDurationDisplayString(value, column.data);\n</code></pre>"},{"location":"plugins/common/#getdatedisplaystring","title":"getDateDisplayString","text":"<p>Get the string display of the date column (return user data according to different configuration parameters)</p> <pre><code>dtable.getDateDisplayString(value, columnData)\n</code></pre> <p>Arguments</p> <ul> <li>value: the value corresponding to the date column</li> <li>columnData: the data configuration attribute of the column corresponding to the date column</li> </ul> <p>Example</p> <pre><code>const tableName = 'tableName';\nconst table = dtable.getTableByName(tableName);\nconst columnName = 'dateColumn';\nconst column = dtable.getColumnByName(table, columnName);\n\nconst value = 'YYYY-MM-DD';\nconst name = dtable.getDateDisplayString(value, column.data);\n</code></pre>"},{"location":"plugins/constants/","title":"Constants","text":"<p>There are some constants in the script that we need to understand</p>"},{"location":"plugins/constants/#columntypes","title":"ColumnTypes","text":"<p>Column type, when inserting/adding column, changing column type, gettingng column formatter, etc. need to be used</p> <pre><code>import { CELL_TYPE } from 'dtable-sdk';\n\nCELL_TYPE.NUMBER              // number\nCELL_TYPE.TEXT                // text\nCELL_TYPE.LONG_TEXT           // long text\nCELL_TYPE.CHECKBOX            // checkbox\nCELL_TYPE.DATE                // date\nCELL_TYPE.SINGLE_SELECT       // single select\nCELL_TYPE.MULTIPLE_SELECT     // multiple select\nCELL_TYPE.IMAGE               // image\nCELL_TYPE.FILE                // file\nCELL_TYPE.COLLABORATOR        // collaborator\nCELL_TYPE.LINK                // Link to other records\nCELL_TYPE.FORMULA             // formula\nCELL_TYPE.LINK_FORMULA        // link formula\nCELL_TYPE.CREATOR             // creator\nCELL_TYPE.CTIME               // created time\nCELL_TYPE.LAST_MODIFIER       // modifier\nCELL_TYPE.MTIME               // modified time\nCELL_TYPE.GEOLOCATION         // geolocation\nCELL_TYPE.AUTO_NUMBER         // auto number\nCELL_TYPE.URL                 // URL\nCELL_TYPE.EMAIL               // enail\nCELL_TYPE.BUTTON              // button\nCELL_TYPE.RATE                // rate\n</code></pre>"},{"location":"plugins/constants/#column-icon-configs","title":"Column icon configs","text":"<p>Icon configuration information corresponding to the column type</p> <pre><code>import { CELL_TYPE, COLUMNS_ICON_CONFIG } from 'dtable-store';\n\nconst text = CELL_TYPE.TEXT;\n// value: 'dtable-font dtable-icon-single-line-text'\nconst textIconClass = COLUMNS_ICON_CONFIG[text];  \n\nconst single_select = CELL_TYPE.SINGLE_SELECT;\n// value: 'dtable-font dtable-icon-single-election'\nconst singleSelectIconClass = COLUMNS_ICON_CONFIG[single_select]; \n\n...\n\n// Note: iconClass is used to display the icon of the column (dtable-font is needed)\n</code></pre>"},{"location":"plugins/constants/#column-options","title":"Column options","text":"<p>The basic configuration information of the column, it is necessary to get the icon configuration of the column and the prompt information of different column types</p> <pre><code>import { CELL_TYPE, COLUMN_OPTIONS } from 'dtable-sdk';\n\nconst text = CELL_TYPE.TEXT;\n// textOption : \n// {\n//    type: 'text',\n//    iconClass: 'dtable-font dtable-icon-single-line-text'  \n//    iconName: 'Text'\n// }\nconst textOption = COLUMN_OPTIONS.find(option =&gt; option.type === text); \n\nconst singleSelect = CELL_TYPE.SINGLE_SELECT;\n// singleSelectOption : \n// {\n//    type: 'single-select',\n//    iconClass: 'dtable-font dtable-icon-single-election'  \n//    iconName: 'Single_Select'\n// }\nconst singleSelectOption = COLUMN_OPTIONS.find(option =&gt; option.type === singleSelect); \n\n...\n\n// Note: iconClass is used to display the icon of the column (dtable-font needs to be introduced)\n//     iconName can be used for internationalization, display prompt messages or text messages\n</code></pre>"},{"location":"plugins/constants/#formula-result-type","title":"Formula result type","text":"<p>Formula column and link formula column calculation result type summary, used to determine the calculation result of the column type related to the calculation</p> <pre><code>import { FORMULA_RESULT_TYPE } from 'dtable-sdk';\n\nFORMULA_RESULT_TYPE.NUMBER     // number\nFORMULA_RESULT_TYPE.STRING     // string\nFORMULA_RESULT_TYPE.DATE       // date\nFORMULA_RESULT_TYPE.BOOL       // bool\nFORMULA_RESULT_TYPE.ARRAY      // array\n</code></pre>"},{"location":"plugins/constants/#select-option-colors","title":"Select option colors","text":"<p>When creating and modifying single select column/multiple select column options, the text color, background color, and border color of the option are provided</p> <pre><code>import { SELECT_OPTION_COLORS } from 'dtable-sdk';\n\n// const SELECT_OPTION_COLORS = [\n//   {COLOR: '#FFFCB5', BORDER_COLOR: '#E8E79D', TEXT_COLOR: '#202428'},\n//   {COLOR: '#FFEAB6', BORDER_COLOR: '#ECD084', TEXT_COLOR: '#202428'},\n//   {COLOR: '#FFD9C8', BORDER_COLOR: '#EFBAA3', TEXT_COLOR: '#202428'},\n//   {COLOR: '#FFDDE5', BORDER_COLOR: '#EDC4C1', TEXT_COLOR: '#202428'},\n//   {COLOR: '#FFD4FF', BORDER_COLOR: '#E6B6E6', TEXT_COLOR: '#202428'},\n//   {COLOR: '#DAD7FF', BORDER_COLOR: '#C3BEEF', TEXT_COLOR: '#202428'},\n//   {COLOR: '#DDFFE6', BORDER_COLOR: '#BBEBCD', TEXT_COLOR: '#202428'},\n//   {COLOR: '#DEF7C4', BORDER_COLOR: '#C5EB9E', TEXT_COLOR: '#202428'},\n//   {COLOR: '#D8FAFF', BORDER_COLOR: '#B4E4E9', TEXT_COLOR: '#202428'},\n//   {COLOR: '#D7E8FF', BORDER_COLOR: '#BAD1E9', TEXT_COLOR: '#202428'},\n//   {COLOR: '#B7CEF9', BORDER_COLOR: '#96B2E1', TEXT_COLOR: '#202428'},\n//   {COLOR: '#E9E9E9', BORDER_COLOR: '#DADADA', TEXT_COLOR: '#202428'},\n//   {COLOR: '#FBD44A', BORDER_COLOR: '#E5C142', TEXT_COLOR: '#FFFFFF'},\n//   {COLOR: '#EAA775', BORDER_COLOR: '#D59361', TEXT_COLOR: '#FFFFFF'},\n//   {COLOR: '#F4667C', BORDER_COLOR: '#DC556A', TEXT_COLOR: '#FFFFFF'},\n//   {COLOR: '#DC82D2', BORDER_COLOR: '#D166C5', TEXT_COLOR: '#FFFFFF'},\n//   {COLOR: '#9860E5', BORDER_COLOR: '#844BD2', TEXT_COLOR: '#FFFFFF'},\n//   {COLOR: '#9F8CF1', BORDER_COLOR: '#8F75E2', TEXT_COLOR: '#FFFFFF'},\n//   {COLOR: '#59CB74', BORDER_COLOR: '#4EB867', TEXT_COLOR: '#FFFFFF'},\n//   {COLOR: '#ADDF84', BORDER_COLOR: '#9CCF72', TEXT_COLOR: '#FFFFFF'},\n//   {COLOR: '#89D2EA', BORDER_COLOR: '#7BC0D6', TEXT_COLOR: '#FFFFFF'},\n//   {COLOR: '#4ECCCB', BORDER_COLOR: '#45BAB9', TEXT_COLOR: '#FFFFFF'},\n//   {COLOR: '#46A1FD', BORDER_COLOR: '#3C8FE4', TEXT_COLOR: '#FFFFFF'},\n//   {COLOR: '#C2C2C2', BORDER_COLOR: '#ADADAD', TEXT_COLOR: '#FFFFFF'},\n// ];\n\n// When creating an option, you can provide related options, or you can use a random function to automatically generate the corresponding option color\n\nconst colorIndex = (Math.random() * SELECT_OPTION_COLORS.length).toFix(0);\nconst selectColor = SELECT_OPTION_COLORS[colorIndex];\n</code></pre>"},{"location":"plugins/constants/#table-permission-type","title":"Table permission type","text":"<p>Permission type of table</p> <pre><code>import { TABLE_PERMISSION_TYPE } from 'dtable-sdk';\n\nTABLE_PERMISSION_TYPE.DEFAULT              // 'default', default permissions\nTABLE_PERMISSION_TYPE.ADMINS               // 'admins', person with administrative rights  \nTABLE_PERMISSION_TYPE.SPECIFIC_USERS       // 'specific_users', specific user\nTABLE_PERMISSION_TYPE.NONE                 // 'none', no one can change table\n</code></pre>"},{"location":"plugins/plugins/","title":"Plugins","text":""},{"location":"plugins/plugins/#getpluginsettings","title":"getPluginSettings","text":"<p>Get the configuration parameters of the plugin</p> <pre><code>dtable.getPluginSettings(pluginName);\n</code></pre> <p>Arguments</p> <ul> <li>pluginName: Plugin name</li> </ul> <p>Example</p> <pre><code>const pluginName = 'gallery';\nconst pluginSetting = dtable.getPluginSettings(pluginName);\n</code></pre>"},{"location":"plugins/plugins/#updatepluginsettings","title":"updatePluginSettings","text":"<p>Update the configuration parameters of the plugin</p> <pre><code>dtable.updatePluginSettings(pluginName, pluginSettings);\n</code></pre> <p>Arguments</p> <ul> <li>pluginName: Plugin name</li> <li>pluginSettings: Plugin configuration parameters</li> </ul> <p>Example</p> <pre><code>const pluginName = 'gallery';\nconst pluginSettings = {};\ndtable.updatePluginSettings(pluginName, pluginSettings);\n</code></pre>"},{"location":"plugins/plugins/#deletepluginsettings","title":"deletePluginSettings","text":"<p>Delete the configuration parameters of the plugin</p> <pre><code>dtable.deletePluginSettings(pluginName);\n</code></pre> <p>Arguments</p> <ul> <li>pluginName: Plugin name</li> </ul> <p>Example</p> <pre><code>const pluginName = 'gallery';\ndtable.deletePluginSettings(pluginName);\n</code></pre>"},{"location":"plugins/query/","title":"Query with SQL","text":""},{"location":"plugins/query/#query","title":"Query","text":"<p>Use sql statement to query a dtable</p> <pre><code>dtable.sqlQuery(sql)\n</code></pre> <p>Arguments</p> <ul> <li>sql: SQL statement to be executed</li> </ul> <p>Note: By default, up to 100 results are returned. If you need more results, please add the limit parameter in the sql statement</p> <p>Possible errors include</p> <ul> <li>ValueError: sql can not be empty</li> <li>ConnectionError: network error</li> <li>Exception: no such table</li> <li>Exception: no such column</li> <li>Exception: columns in group by should match columns in select</li> </ul>"},{"location":"plugins/query/#example","title":"Example","text":""},{"location":"plugins/query/#basic-query","title":"Basic query","text":"<pre><code>dtable.sqlQuery('select name, price, year from Bill')\n</code></pre> <p>result</p> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob', 'price': 300, 'year': 2019},\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300, 'year': 2021},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom', 'price': 100, 'year': 2019},\n    {'_id': 'NxeaB5pDRFKOItUs_Ugxug', 'name': 'Tom', 'price': 100, 'year': 2020},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200, 'year': 2021},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane', 'price': 200, 'year': 2020},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200, 'year': 2021}\n]\n</code></pre>"},{"location":"plugins/query/#where","title":"WHERE","text":"<pre><code>dtable.sqlQuery('select name, price from Bill where year = 2021 ')\n</code></pre> <p>result</p> <pre><code>[\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200}\n]\n</code></pre>"},{"location":"plugins/query/#order-by","title":"ORDER BY","text":"<pre><code>dtable.sqlQuery('select name, price, year from Bill order by year')\n</code></pre> <p>result</p> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob', 'price': 300, 'year': 2019},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom', 'price': 100, 'year': 2019},\n    {'_id': 'NxeaB5pDRFKOItUs_Ugxug', 'name': 'Tom', 'price': 100, 'year': 2020},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane', 'price': 200, 'year': 2020},\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300, 'year': 2021},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200, 'year': 2021},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200, 'year': 2021}\n]\n</code></pre>"},{"location":"plugins/query/#group-by","title":"GROUP BY","text":"<pre><code>dtable.sqlQuery('select name, sum(price) from Bill group by name')\n</code></pre> <p>result</p> <pre><code>[\n    {'SUM(price)': 600, 'name': 'Bob'},\n    {'SUM(price)': 400, 'name': 'Tom'},\n    {'SUM(price)': 400, 'name': 'Jane'}\n]\n</code></pre>"},{"location":"plugins/query/#distinct","title":"DISTINCT","text":"<pre><code>dtable.sqlQuery('select distinct name from Bill')\n</code></pre> <p>result</p> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob'},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom'},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane'}\n]\n</code></pre>"},{"location":"plugins/rows/","title":"Rows","text":""},{"location":"plugins/rows/#appendrow","title":"appendRow","text":"<p>Add row data</p> <pre><code>dtable.appendRow(table, rowData, view, { collaborators } = {});\n</code></pre> <p>Arguments</p> <ul> <li>table: table object</li> <li>rowData: data of row</li> <li>view: view object, can be null</li> <li>{ collaborators } : Object parameter containing the list of collaborators</li> </ul> <p>Example</p> <pre><code>const tableName = 'Table1';\nconst table = dtable.getTableByName(tableName);\nconst viewName = 'Default View'\nconst view = dtable.getViewByName(table, viewName);\nconst collaborators = dtable.getRelatedUsers();\nconst rowData = {\n  'Name': 'Mike',\n  'Age': 28,\n  'Job': 'Software engineer'\n};\ndtable.appendRow(table, rowData, view, { collaborators });\n</code></pre>"},{"location":"plugins/rows/#deleterowbyid","title":"deleteRowById","text":"<p>Delete the data of row of the table by id</p> <pre><code>dtable.deleteRowById(table, rowId);\n</code></pre> <p>Arguments</p> <ul> <li>table: table object</li> <li>rowId: the id of the row</li> </ul> <p>Example</p> <pre><code>const tableName = 'Table1';\nconst table = dtable.getTableByName(tableName);\nconst viewName = 'Default View'\nconst view = dtable.getViewByName(table, viewName);\n\nconst rows = dtable.getViewRows(view, table);\nconst rowId = rows[0]._id;\n\ndtable.deleteRowById(table, rowId);\n</code></pre>"},{"location":"plugins/rows/#deleterowsbyids","title":"deleteRowsByIds","text":"<p>Delete multiple rows of table through the id list</p> <pre><code>dtable.deleteRowsByIds(table, rowIds);\n</code></pre> <p>Arguments</p> <ul> <li>table: table object</li> <li>rowIds: the id list of multiple data of row</li> </ul> <p>Example</p> <pre><code>const tableName = 'Table1';\nconst table = dtable.getTableByName(tableName);\nconst viewName = 'Default View';\nconst view = dtable.getViewByName(table, viewName);\n\nconst rows = dtable.getViewRows(view, table);\nconst rowIds = rows.map(row =&gt; row._id);\n\n// Delete the first five data of row\ndtable.deleteRowsByIds(table, rowIds.slice(0, 5));\n</code></pre>"},{"location":"plugins/rows/#modifyrow","title":"modifyRow","text":"<p>modify row</p> <pre><code>dtable.modifyRow(table, row, updated);\n</code></pre> <p>Arguments</p> <ul> <li>table: table object</li> <li>row: row object</li> <li>updated: new row value object</li> </ul> <p>Example</p> <pre><code>const tableName = 'Table1';\nconst table = dtable.getTableByName(tableName);\nconst viewName = 'Default View'\nconst view = dtable.getViewByName(table, viewName);\n\nconst rows = dtable.getViewRows(view, table);\nconst rowId = rows[0];\nconst updated = {\n  'Age': 30,\n  'Job': 'Teacher'\n};\ndtable.modifyRow(table, row, updated);\n</code></pre>"},{"location":"plugins/rows/#foreachrow","title":"forEachRow","text":"<p>Traverse the data of row and complete the corresponding logic according to certain conditions</p> <pre><code>dtable.forEachRow(tableName, viewName, callback, { username, userId } = {});\n</code></pre> <p>Arguments</p> <ul> <li>tableName: table bane</li> <li>viewName: view name</li> <li>callback: callback function, processing custom logic</li> <li>{ username, userId }: Object parameters containing user name and user id</li> </ul> <p>Note: username and userId can be read from the local configuration file in the development environment, and read from window.dtable in the production environment</p> <p>Example</p> <pre><code>import { username, userId } from 'setting.local';\n\n// const { username, userId } = window.dtable;\n\n// Business requirement:\n// If the \"task status\" column in the data of row is \"completed\"\n// set the \"qualified\" column in the changed row to \"yes\"\nconst tableName = 'Table1';\nconst viewName = 'Default View'\ndtable.forEachRow(tableName, viewName, (row) =&gt; {\n  // Realize business needs\n  if (row['task status'] === 'completed') {\n    const table = dtable.getTableByName(tableName);\n    const updated = {'qualified': 'yes'};\n    dtable.modifyRow(table, row, updated);\n  }\n}, {username, userId});\n</code></pre>"},{"location":"plugins/rows/#gettablelinkrows","title":"getTableLinkRows","text":"<p>Get the id value of all data of row related to other tables of data of row</p> <pre><code>dtable.getTableLinkRows(rows, table);\n</code></pre> <p>Arguments</p> <ul> <li>rows: data of row</li> <li>table: data of row belongs to the table object</li> </ul> <p>Example</p> <pre><code>const tableName = 'Table1';\nconst table = dtable.getTableByName(tableName);\nconst viewName = 'Default View'\nconst view = dtable.getViewByName(table, viewName);\n\nconst rows = dtable.getViewRows(view, table);\n\nconst findLinkRows = rows.slice(0, 5);\ndtable.getTableLinkRows(finLinkRows, table);\n</code></pre>"},{"location":"plugins/rows/#getviewrows","title":"getViewRows","text":"<p>Get the data of row of the view</p> <pre><code>dtable.getViewRows(view, table);\n</code></pre> <p>Arguments</p> <ul> <li>view: view object</li> <li>table: table object</li> </ul> <p>Example</p> <pre><code>const tableName = 'Table1';\nconst table = dtable.getTableByName(tableName);\nconst viewName = 'Default View'\nconst view = dtable.getViewByName(table, viewName);\n\nconst rows = dtable.getViewRows(view, table);\n</code></pre>"},{"location":"plugins/rows/#getgrouprows","title":"getGroupRows","text":"<p>Get the rows of group</p> <pre><code>dtable.getGroupRows(view, table);\n</code></pre> <p>Arguments</p> <ul> <li>view: view object</li> <li>table: table object</li> </ul> <p>Example</p> <pre><code>const tableName = 'Table1';\nconst table = dtable.getTableByName(tableName);\nconst viewName = 'Default View'\nconst view = dtable.getViewByName(table, viewName);\n\nconst rows = dtable.getViewRows(view, table);\n</code></pre>"},{"location":"plugins/rows/#getinsertedrowinitdata","title":"getInsertedRowInitData","text":"<p>Get the default data of the new row (if the table contains sorting, group, filtering and other functions, you can directly get the default value of the new row through this api)</p> <pre><code>dtable.getInsertedRowInitData(view, table, rowId);\n</code></pre> <p>Arguments</p> <ul> <li>view: view object</li> <li>table: table object</li> <li>rowId: the id of the row before the new row</li> </ul> <p>Example</p> <pre><code>const tableName = 'Table1';\nconst table = dtable.getTableByName(tableName);\nconst viewName = 'Default View'\nconst view = dtable.getViewByName(table, viewName);\n\nconst rows = dtable.getViewRows(view, table);\nconst prevRow = rows[row.length - 1];\n\nconst defaultRowData = dtable.getInsertedRowInitData(view, table, prevRow._id);\n</code></pre>"},{"location":"plugins/rows/#getrowsbyid","title":"getRowsByID","text":"<p>Get the relevant data of row of the table through the id list</p> <pre><code>dtable.getRowsByID(tableId, rowIds);\n</code></pre> <p>Arguments</p> <ul> <li>tableId: Id value of the table</li> <li>rowIds: the id list of the rows</li> </ul> <p>Example</p> <pre><code>const tableName = 'Table1';\nconst table = dtable.getTableByName(tableName);\nconst rowIds = ['aaa', 'bbb', 'cccc', 'dddd'];\nconst rows = dtable.getRowsByID(table._id, rowIds);\n</code></pre>"},{"location":"plugins/rows/#getrowbyid","title":"getRowById","text":"<p>Get the relevant data of row of the table through row id</p> <pre><code>dtable.getRowById(table, rowId);\n</code></pre> <p>Arguments</p> <ul> <li>table: table object</li> <li>rowId: the id of the row</li> </ul> <p>Example</p> <pre><code>const tableName = 'Table1';\nconst table = dtable.getTableByName(tableName);\nconst rowId = 'aaaa';\nconst rows = dtable.getRowById(table, rowId);\n</code></pre>"},{"location":"plugins/rows/#movegrouprows","title":"moveGroupRows","text":"<p>Move the rows in the group</p> <pre><code>dtable.moveGroupRows(table, targetIds, movePosition, movedRows, upperRowIds, updated, oldRows, groupbyColumns);\n</code></pre> <p>Arguments</p> <ul> <li>table: table object</li> <li>targetIds: list of row ids where the row is moved</li> <li>movePosition:  relative position of movement, 'move_above' or 'move_below'</li> <li>movedRows: moved data of row list</li> <li>upperRowIds: the previous row ids where all the moved rows were before</li> <li>updated: the new attribute value object that needs to be updated after moving the row (moving across the group, the movement of different filter conditions may cause the data changed)</li> <li>oldRows: the old attribute value object that needs to be updated before moving the row</li> <li>groupbyColumns: column data of the current view group</li> </ul> <p>Example</p> <pre><code>const tableName = 'Table1';\nconst table = dtable.getTableByName(tableName);\n// 1. Assumption: The default data of row list is as follows, group according to the Group column\nconst rows = [\n  {_id: 'aaa', 'Name', 'Mike', 'Age': '29', 'Birthday': '1992-09-09', 'Group': 'a'},\n  {_id: 'bbb', 'Name', 'Tom', 'Age': '25', 'Birthday': '1996-09-09', 'Group': 'a'},\n  {_id: 'ccc', 'Name', 'Doris', 'Age': '24', 'Birthday': '1997-09-09', 'Group': 'a'},\n  {_id: 'ddd', 'Name', 'Judy', 'Age': '22', 'Birthday': '1993-09-09', 'Group': 'a'},\n  {_id: 'eee', 'Name', 'Tony', 'Age': '27', 'Birthday': '1992-09-09', 'Group': 'b'},\n  {_id: 'fff', 'Name', 'Michael', 'Age': '25', 'Birthday': '1990-09-09', 'Group': 'b'},\n  {_id: 'ggg', 'Name', 'Donald', 'Age': '26', 'Birthday': '1996-09-09', 'Group': 'b'},\n  {_id: 'hhh', 'Name', 'Jerry', 'Age': '27', 'Birthday': '1999-09-09', 'Group': 'b'},\n];\n\n// 2. Move Tom and Judy to the bottom of the Jerry row, the relevant parameters are as follows\nconst targetIds = ['hhh', 'hhh'];\nconst move_position = 'move_below';\nconst movedRows = [\n  {_id: 'bbb', 'Name', 'Tom', 'Age': '25', 'Birthday': '1996-09-09', 'Group': 'a'},\n  {_id: 'ddd', 'Name', 'Judy', 'Age': '22', 'Birthday': '1993-09-09', 'Group': 'a'},\n];\nconst upperRowIds = ['aaa', 'ccc'];\nconst updated = {\n  'bbb': {'Group': 'b'},\n  'ddd': {'Group': 'b'},\n};\nconst oldRows = {\n  'bbb': {'Group': 'a'},\n  'ddd': {'Group': 'a'},\n};\n\nconst groupbyColumns = [{key: 'Group', name: 'Group', type: 'text', ...}];\n\nconst rows = dtable.moveGroupRows(table, targetIds, movePosition, movedRows, upperRowIds, updated, oldRows, groupbyColumns);\n</code></pre>"},{"location":"plugins/tables/","title":"Tables","text":""},{"location":"plugins/tables/#addtable","title":"addTable","text":"<p>Add table</p> <pre><code>dtable.addTable(tableName);\n</code></pre> <p>Arguments</p> <ul> <li>tableName: the name of the table</li> </ul> <p>Example</p> <pre><code>dtable.addTable('newTable');\n</code></pre>"},{"location":"plugins/tables/#deletetable","title":"deleteTable","text":"<p>Delete table</p> <pre><code>dtable.deleteTable(tableName);\n</code></pre> <p>Arguments</p> <ul> <li>tableName: the name of the table</li> </ul> <p>Example</p> <pre><code>dtable.deleteTable('newTable');\n</code></pre>"},{"location":"plugins/tables/#renametable","title":"renameTable","text":"<p>Modify the name of the table</p> <pre><code>dtable.renameTable(oldTableName, newTableName);\n</code></pre> <p>Arguments</p> <ul> <li>oldTableName: the old name of the table</li> <li>newTableName: the new name of the table</li> </ul> <p>Example</p> <pre><code>dtable.renameTable('oldTableName', 'newTableName');\n</code></pre>"},{"location":"plugins/tables/#gettables","title":"getTables","text":"<p>Get all the tables in base</p> <pre><code>dtable.getTables();\n</code></pre> <p>Example</p> <pre><code>const tables = dtable.getTables();\n</code></pre>"},{"location":"plugins/tables/#getactivetable","title":"getActiveTable","text":"<p>Get the current table being accessed by base</p> <pre><code>dtable.getActiveTable();\n</code></pre> <p>Example</p> <pre><code>const table = dtable.getActiveTable();\n</code></pre>"},{"location":"plugins/tables/#gettablebyname","title":"getTableByName","text":"<p>Get the table by table name</p> <pre><code>dtable.getTableByName(tableName);\n</code></pre> <p>Arguments</p> <ul> <li>tableName: the name of the table</li> </ul> <p>Example</p> <pre><code>dtable.getTableByName('tableName');\n</code></pre>"},{"location":"plugins/tables/#gettablebyid","title":"getTableById","text":"<p>Get the content of the table by id</p> <pre><code>dtable.getTableById(tableId);\n</code></pre> <p>Arguments</p> <ul> <li>tableId: Id of the table</li> </ul> <p>Example</p> <pre><code>dtable.getTableById('0000');\n</code></pre>"},{"location":"plugins/tables/#importdataintonewtable","title":"importDataIntoNewTable","text":"<p>Add a new table to base and include default data</p> <pre><code>dtable.importDataIntoNewTable(tableName, columns, rows);\n</code></pre> <p>Arguments</p> <ul> <li>tableName: name of the new table</li> <li>columns: columns of the new table</li> <li>rows: rows of the new table</li> </ul> <p>Example</p> <pre><code>const tableName = 'tableName';\nconst columns = [\n  {\n    key: '0000',\n    type: 'text',\n    name: 'column1',\n    width: 200,\n  },\n  {\n    key: '1111',\n    type: 'date',\n    name: 'column2',\n    width: 300,\n    data: {\n      format: 'YYYY-MM-DD'\n    }\n  }\n];\nconst rows = [\n  {'0000': 'Mike', '1111': '1993-03-03'},\n  {'0000': 'Tom', '1111': '1993-04-04'},\n  {'0000': 'Makino', '1111': '1994-04-05'},\n];\ndtable.importDataIntoNewTable(tableName, columns, rows);\n</code></pre>"},{"location":"plugins/views/","title":"Views","text":""},{"location":"plugins/views/#addview","title":"addView","text":"<p>add a view</p> <pre><code>dtable.addView(tableName, viewName);\n</code></pre> <p>Arguments</p> <ul> <li>tableName: name of table</li> <li>viewName: name of view</li> </ul> <p>Example</p> <pre><code>dtable.addView('tableName', 'viewName');\n</code></pre>"},{"location":"plugins/views/#deleteview","title":"deleteView","text":"<p>delete a view</p> <pre><code>dtable.deleteView(tableName, viewName);\n</code></pre> <p>Arguments</p> <ul> <li>tableName: name of table</li> <li>viewName: name of view</li> </ul> <p>Example</p> <pre><code>dtable.deleteView('TableName', ViewName);\n</code></pre>"},{"location":"plugins/views/#renameview","title":"renameView","text":"<p>modify view name</p> <pre><code>dtable.renameView(tableName, oldViewName, newViewName);\n</code></pre> <p>Arguments</p> <ul> <li>tableName: name of table</li> <li>oldViewName: old name of the view</li> <li>newViewName: new name of the view</li> </ul> <p>Example</p> <pre><code>dtable.renameView('tableName', 'oldViewName', 'newViewName');\n</code></pre>"},{"location":"plugins/views/#getviews","title":"getViews","text":"<p>Get the non-private views in the table</p> <pre><code>dtable.getViews(table);\n</code></pre> <p>Arguments</p> <ul> <li>table: table object</li> </ul> <p>Example</p> <pre><code>const tableId = '0000';\nconst table = dtable.getTableById(tableId);\nconst views = dtable.getViews(table);\n</code></pre>"},{"location":"plugins/views/#getnonarchiveviews","title":"getNonArchiveViews","text":"<p>Get non-private and non-archive views in the table</p> <pre><code>dtable.getNonArchiveViews(table);\n</code></pre> <p>Arguments</p> <ul> <li>table: table object</li> </ul> <p>Example</p> <pre><code>const tableId = '0000';\nconst table = dtable.getTableById(tableId);\nconst views = dtable.getNonArchiveViews(table);\n</code></pre>"},{"location":"plugins/views/#getactiveview","title":"getActiveView","text":"<p>Get the current view being accessed by base</p> <pre><code>dtable.getActiveView();\n</code></pre> <p>Example</p> <pre><code>const view = dtable.getActiveView();\n</code></pre>"},{"location":"plugins/views/#getviewbyname","title":"getViewByName","text":"<p>Get view by name</p> <pre><code>dtable.getViewByName(table, viewName);\n</code></pre> <p>Arguments</p> <ul> <li>table: table object</li> <li>viewName: the name of the view</li> </ul> <p>Example</p> <pre><code>const tableId = '0000';\nconst table = dtable.getTableById(tableId);\nconst viewName = 'viewName';\nconst view = dtable.getViewByName(table, viewName);\n</code></pre>"},{"location":"plugins/views/#getviewbyid","title":"getViewById","text":"<p>Get view content by id</p> <pre><code>dtable.getViewById(table, viewId);\n</code></pre> <p>Arguments</p> <ul> <li>table: table object</li> <li>viewId: the id of the view</li> </ul> <p>Example</p> <pre><code>const tableId = '0000';\nconst table = dtable.getTableById(tableId);\nconst viewId = '0000';\nconst view = dtable.getViewById(table, viewId);\n</code></pre>"},{"location":"plugins/views/#isdefaultview","title":"isDefaultView","text":"<p>Determine whether it is the default view (does not include grouping, filtering, sorting, etc.)</p> <pre><code>dtable.isDefaultView(view, columns);\n</code></pre> <p>Arguments</p> <ul> <li>view: view object</li> <li>columns: all columns in the table</li> </ul> <p>Example</p> <pre><code>const tableId = '0000';\nconst table = dtable.getTableById(tableId);\nconst viewId = '0000';\nconst view = dtable.getViewById(table, viewId);\nconst columns = dtable.getColumns(table);\nconst isDefaultView = dtable.isDefaultView(view, columns);\n</code></pre>"},{"location":"plugins/views/#isgroupview","title":"isGroupView","text":"<p>Check whether it is a view containing grouping (including grouping conditions)</p> <pre><code>dtable.isGroupView(view, columns);\n</code></pre> <p>Arguments</p> <ul> <li>view: view object</li> <li>columns: all columns in the table</li> </ul> <p>Example</p> <pre><code>const tableId = '0000';\nconst table = dtable.getTableById(tableId);\nconst viewId = '0000';\nconst view = dtable.getViewById(table, viewId);\nconst columns = dtable.getColumns(table);\nconst isGroupView = dtable.isGroupView(view, columns);\n</code></pre>"},{"location":"plugins/views/#isfilterview","title":"isFilterView","text":"<p>Check whether it is a filter view (including filter conditions)</p> <pre><code>dtable.isFilterView(view, columns);\n</code></pre> <p>Arguments</p> <ul> <li>view: view object</li> <li>columns: all columns in the table</li> </ul> <p>Example</p> <pre><code>const tableId = '0000';\nconst table = dtable.getTableById(tableId);\nconst viewId = '0000';\nconst view = dtable.getViewById(table, viewId);\nconst columns = dtable.getColumns(table);\nconst isFilterView = dtable.isFilterView(view, columns);\n</code></pre>"},{"location":"python/","title":"SeaTable Python script","text":"<p>The Python script runs on the server side and can be set to automatically run periodically, which is suitable for more complex data processing scenarios.</p> <p>Python scripts can be run on your local machine or uploaded to the SeaTable cloud to run. Local operation is convenient for development and debugging, and scripts can be easily integrated into larger projects.</p>"},{"location":"python/#how-to-make-the-script-support-both-local-and-cloud-run","title":"How to make the script support both local and cloud run","text":"<p>When the script runs in the cloud, it will provide a context object, which contains the server URL auto generated by the system and the API token of base. If you run the script in local, you need to manually specify these two variables; the API token can be generated in the drop-down menu \"Advanced -&gt; API Token\" of the table.</p> <p>Use the following method to make the script support both local and cloud run</p> <pre><code>from seatable_api import Base, context\n\nserver_url = context.server_url or 'https://cloud.seatable.io'\napi_token = context.api_token or 'c3c75dca2c369849455a39f4436147639cf02b2d'\n\n\nbase = Base(api_token, server_url)\nbase.auth()\n</code></pre>"},{"location":"python/#dependencies-that-need-to-be-installed-to-run-the-script-local","title":"Dependencies that need to be installed to run the script local","text":"<p>The script need to install <code>seatable-api</code> when run in local.</p> <pre><code>pip3 install seatable-api\n</code></pre> <p>Requirements</p> <ul> <li>Python &gt;= 3.5</li> <li>requests</li> <li>socketIO-client-nexus</li> </ul>"},{"location":"python/#a-simple-example","title":"A simple example","text":"<p>This following example shows how to operate records in a table.</p> <pre><code>base = Base(api_token, server_url)\nbase.auth()\n\nrows = base.list_rows(\"Table1\")\n\nrow_data = {'name': 'Tom', 'age': 18}\nbase.append_row('Table1', row_data)\nbase.update_row('Table1', 'U_eTV7mDSmSd-K2P535Wzw', row_data)\nbase.delete_row('Table1', 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre>"},{"location":"python/#how-to-monitor-base-changes-when-you-run-script-locally","title":"How to monitor base changes when you run script locally","text":"<p>You can run monitor base changes using socketIO as following:</p> <pre><code>from seatable_api import Base\nfrom seatable_api.constants import UPDATE_DTABLE\n\nserver_url = 'https://cloud.seatable.io/'\napi_token = 'xxxxxx'\n\nbase = Base(api_token, server_url)\nbase.auth(with_socket_io=True)\n\n# You can overwrite this event\n\ndef on_update_seatable(data, index, *args):\n    print(data)\n\nbase.socketIO.on(UPDATE_DTABLE, on_update_seatable)\nbase.socketIO.wait()  # forever\n</code></pre>"},{"location":"python/#reference","title":"Reference","text":"<p>Data structure of object in SeaTable:</p> <ul> <li>Data structure</li> </ul> <p>SeaTable API introduction:</p> <ul> <li>Base</li> <li>Rows</li> <li>QuerySet</li> <li>Links</li> <li>Columns</li> <li>Files</li> <li>Account</li> <li>Context</li> <li>Constants: Some constant definitions</li> <li>Libs: List of Python libraries supported for import in the cloud</li> <li>Websocket: Get realtime data update notifications by Websocket</li> <li>Query Statements</li> </ul>"},{"location":"python/#example","title":"Example","text":"<p>You can find some easy to understand examples through this linkhttps://github.com/seatable/seatable-scripts/tree/master/examples/python</p> <p>Detail as follow</p> <ul> <li>send_email.py: Read pictures/files in one table as attachments and send email to contacts in another table</li> <li>generate_barcode.py: Transfer the text into barcode and save it into image type column of a base</li> </ul>"},{"location":"python/account/","title":"Account","text":"<p>Account provides an interface to list all Workspaces, add/copy/delete Bases, and obtain access rights to a Base.</p>"},{"location":"python/account/#authorized-login","title":"Authorized login","text":"<p>Use email/password to log in, if you want to call other APIs provided by Account, you need to log in first</p>"},{"location":"python/account/#example","title":"Example","text":"<pre><code>from seatable_api import Account\nusername = 'xiongxxx@xxx.com'\npassword = 'xxxxxxx'\nserver_url = 'https://cloud.seatable.cn/'\naccount = Account(username, password, server_url)\naccount.auth()\n</code></pre>"},{"location":"python/account/#workspace","title":"Workspace","text":"<p>A Workspace is a collection of user's Bases or a collection of group's Bases</p>"},{"location":"python/account/#list-workspaces","title":"List workspaces","text":"<p>Get all your workspaces and its Bases</p>"},{"location":"python/account/#example_1","title":"Example","text":"<pre><code>account.list_workspaces()\n</code></pre> <p>Return</p> <pre><code> {\n    \"workspace_list\": [{\n        \"id\": 13740,      // workspace id\n        \"repo_id\": \"cd9a97a6-9214-4eeb-b609-4295530b9018\",\n        \"table_list\": [{  // base object\n            \"id\": 24022,\n            \"workspace_id\": 13740,\n            \"uuid\": \"69771c2e-b51e-4fe4-b721-01cd1950e68c\",\n            \"name\": \"q\",\n            \"creator\": \"122\",\n            \"modifier\": \"122\",\n            \"created_at\": \"2020-10-26T14:43:02+08:00\",\n            \"updated_at\": \"2020-10-26T14:43:02+08:00\",\n            \"color\": null,\n            \"text_color\": null,\n            \"icon\": null,\n            \"starred\": false\n        }],\n        \"owner_name\": \"122\",\n        \"owner_type\": \"Personal\"\n    }],\n    \"starred_dtable_list\": []\n}\n</code></pre>"},{"location":"python/account/#base","title":"Base","text":"<p>Add/copy/delete Base, interface to get access to Base</p>"},{"location":"python/account/#add-a-base","title":"Add a base","text":"<p>Add a base to a Workspace </p> <pre><code>account.add_base(name, workspace_id=None)\n</code></pre> <ul> <li>workspace_id: to which the base will be added, user's own workspace by default if set to None</li> </ul>"},{"location":"python/account/#example_2","title":"Example","text":"<pre><code>account.add_base('new-base')\naccount.add_base('new-base', 35)\n</code></pre>"},{"location":"python/account/#copy-a-base","title":"Copy a base","text":"<p>Copy a base to a workspace</p> <pre><code>account.copy_base(src_workspace_id, base_name, dst_workspace_id)\n</code></pre> <ul> <li>src_workspace_id: source workspace</li> <li>dst_workspace_id: target workspace</li> </ul> <p>Copy a base named base_name from src_workspace to dst_workspace</p>"},{"location":"python/account/#example_3","title":"Example","text":"<pre><code>account.copy_base(35, 'img-file', 74)\n</code></pre>"},{"location":"python/account/#get-a-base","title":"Get a base","text":"<p>Get a base object</p> <pre><code># Get the Base object named base_name that exists in the workspace whose id is workspace_id\n# Base object has been authorized, it is not necessary to call base.auth()\naccount.get_base(workspace_id, base_name)\n</code></pre>"},{"location":"python/account/#example_4","title":"Example","text":"<pre><code>base = account.get_base(35, 'img-file')\n</code></pre>"},{"location":"python/base/","title":"Base object","text":"<p>Base represents a table. You can use two methods to obtain authorization to read and write a base. One way is to use the api token of the base, the token can be directly generated on the web side. Read directly from context.api_token in the cloud environment.</p> <p>Another method is to use the account name and password to initialize an Account object, and then call the Account interface to get a base object. The first method is more secure.</p>"},{"location":"python/base/#get-authorization","title":"Get authorization","text":"<p>Use the API Token of the base to get access authorization.</p>"},{"location":"python/base/#example","title":"Example","text":"<pre><code>from seatable_api import Base, context\n\nserver_url = context.server_url or 'https://cloud.seatable.io'\napi_token = context.api_token or 'c3c75dca2c369849455a39f4436147639cf02b2d'\n\nbase = Base(api_token, server_url)\nbase.auth()\n</code></pre>"},{"location":"python/base/#metadata","title":"Metadata","text":""},{"location":"python/base/#get-metadata","title":"Get metadata","text":""},{"location":"python/base/#example_1","title":"Example","text":"<pre><code>base.get_metadata()\n</code></pre> <p>Return</p> <pre><code>{\n    'tables': [{\n        '_id': '4krH',\n        'name': 'Contact',\n        'is_header_locked': False,\n        'columns': [{\n            'key': '0000',\n            'type': 'text',\n            'name': 'Name',\n            'editable': True,\n            'width': 200,\n            'resizable': True,\n            'draggable': True,\n            'data': None,\n            'permission_type': '',\n            'permitted_users': []\n        }, {\n            'key': 'M31F',\n            'type': 'text',\n            'name': 'Email',\n            'editable': True,\n            'width': 200,\n            'resizable': True,\n            'draggable': True,\n            'data': None,\n            'permission_type': '',\n            'permitted_users': []\n        }],\n        'views': [{\n            '_id': '0000',\n            'name': 'Default view',\n            'type': 'table',\n            'is_locked': False,\n            'filter_conjunction': 'And',\n            'filters': [],\n            'sorts': [],\n            'groupbys': [],\n            'group_rows': [],\n            'groups': [],\n            'colorbys': {},\n            'hidden_columns': [],\n            'rows': [],\n            'formula_rows': {},\n            'link_rows': {},\n            'summaries': {},\n            'colors': {}\n        }]\n    }]\n}\n</code></pre>"},{"location":"python/base/#table","title":"Table","text":""},{"location":"python/base/#add-table","title":"add table","text":"<p>Add a table into a base</p> <pre><code>base.add_table(table_name, lang='en')\n</code></pre> <ul> <li>lang: languages, default by English ('en'), currently support English('en') and Chinese('zh-cn')</li> </ul>"},{"location":"python/base/#example_2","title":"Example","text":"<pre><code>base.add_table('Investigation', lang='zh-cn')\n</code></pre>"},{"location":"python/base/#operation-on-base","title":"Operation on Base","text":"<p>The Base object provides interfaces for operating rows and columns, uploading and downloading files, etc. Please refer to the following documents</p> <ul> <li>Rows</li> <li>Links</li> <li>Columns</li> <li>Files</li> </ul>"},{"location":"python/base/#authorization-expiration-handling","title":"Authorization expiration handling","text":"<p>In some cases, the program need to run for a long time, we put the base operation code into a while or for loop. Authorization may expire during execution and cause the program to break. We provide an exception called <code>AuthExpiredError</code> that can be caught for reauthorization.</p> <p>Note, this feature works with SeaTable version 3.1+</p> <pre><code>from seatable_api import Base, context\nfrom seatable_api.exception import AuthExpiredError\n\nserver_url = context.server_url or 'https://cloud.seatable.io'\napi_token = context.api_token or 'c3c75dca2c369849455a39f4436147639cf02b2d'\n\nbase = Base(api_token, server_url)\nbase.auth()\n\nwhile True:\n    try:\n        base.append_row('Table1', {\"xxx\":\"xxx\"})\n        ...\n    except AuthExpiredError:\n       base.auth()\n</code></pre>"},{"location":"python/big_data_storage/","title":"Big data storage","text":"<p>We provide some functions that can handle the data in the big data storage. Before calling these functions, please first turn on the big data feature on web page.</p>"},{"location":"python/big_data_storage/#insert-rows-into-big-data-storage","title":"Insert rows into big data storage","text":"<p>Batch insert rows into big data storage</p> <pre><code>base.big_data_insert_rows(table_name, rows_data)\n</code></pre> <ul> <li>table_name: the name of the table</li> </ul>"},{"location":"python/big_data_storage/#example","title":"Example","text":"<pre><code>rows = [\n        {'Name': \"A\"},\n        {'Name': \"B\"}\n    ]\n\nbase.big_data_insert_rows('Table1', rows_data=rows)\n</code></pre>"},{"location":"python/columns/","title":"Column","text":""},{"location":"python/columns/#list-columns","title":"List columns","text":"<p>List all rows of the table/view</p> <pre><code>base.list_columns(table_name, view_name=None)\n</code></pre> <ul> <li>table_name: the name or id of the table</li> </ul>"},{"location":"python/columns/#example","title":"Example","text":"<pre><code>base.list_columns('Table1')\nbase.list_columns('Table1', view_name='default')\n</code></pre>"},{"location":"python/columns/#insert-column","title":"Insert column","text":"<p>Insert/Append column</p> <pre><code>base.insert_column(table_name, column_name, column_type, column_key=None, column_data=None)\n</code></pre> <ul> <li>table_name: the name or id of the table</li> <li>column_key: the key of column after which the new column will be inserted, it will be appended to the last column by default</li> <li>column_type: please refer to constants</li> <li>column_data: config info of column, required for link-type column, optional for other type columns</li> </ul>"},{"location":"python/columns/#example_1","title":"Example","text":"<pre><code>from seatable_api.constants import ColumnTypes\nbase.insert_column('Table1', 'python-api', ColumnTypes.TEXT)\nbase.insert_column('Table1', 'python-api', ColumnTypes.TEXT, column_key=ColumnTypes.TEXT)\nbase.insert_column('Table1', 'Link', ColumnTypes.LINK, column_data={\n        'table':'Table1',\n        'other_table':'Test_User'\n    })\n</code></pre>"},{"location":"python/columns/#rename-column","title":"Rename column","text":"<p>Rename a column</p> <pre><code>base.rename_column(table_name, column_key, new_column_name)\n</code></pre> <ul> <li>table_name: the name or id of the table</li> </ul>"},{"location":"python/columns/#example_2","title":"Example","text":"<pre><code>base.rename_column('Table1', 'kSiR', 'new-python-api')\n</code></pre>"},{"location":"python/columns/#resize-column","title":"Resize column","text":"<p>Set a column width</p> <pre><code>base.resize_column(table_name, column_key, new_column_width)\n</code></pre> <ul> <li>table_name: the name or id of the table</li> </ul>"},{"location":"python/columns/#example_3","title":"Example","text":"<p>The default width of a column is 200, if you need to adjust the column width, such as 500</p> <pre><code>base.resize('Table1', 'asFV', 500)\n</code></pre>"},{"location":"python/columns/#freeze-column","title":"Freeze column","text":"<p>Freeze a column</p> <pre><code>base.freeze_column(table_name, column_key, frozen)\n</code></pre> <ul> <li>table_name: the name or id of the table</li> <li>frozon: True/False</li> </ul>"},{"location":"python/columns/#example_4","title":"Example","text":"<pre><code>base.freeze_column('Table1', '0000', True)\n</code></pre>"},{"location":"python/columns/#move-column","title":"Move column","text":"<pre><code>base.move_column(table_name, column_key, target_column_key)\n</code></pre> <ul> <li>table_name: the name or id of the table</li> <li>column_key:  the key of the column you want to move</li> <li>target_column_key:  is the key of the anchor column, the moved column will be moved to the right of the column</li> </ul>"},{"location":"python/columns/#example_5","title":"Example","text":"<pre><code>base.move_column('Table1', 'loPx', '0000')\n</code></pre> <p>In this example, the 'loPx' column will be moved to the right of the '0000' column</p>"},{"location":"python/columns/#modify-column-type","title":"Modify column type","text":"<p>Transform a column type</p> <pre><code>base.modify_column_type(table_name, column_key, new_column_type)\n</code></pre> <ul> <li>table_name: the name or id of the table</li> </ul> <p>column_type please refer to constants</p>"},{"location":"python/columns/#example_6","title":"Example","text":"<pre><code>from seatable_api.constants import ColumnTypes\n\nbase.modify_column_type('Table1', 'nePI', ColumnTypes.NUMBER)\n</code></pre>"},{"location":"python/columns/#add-column-options","title":"Add column options","text":"<p>Used by single-select or multiple-select type columns</p> <pre><code>add_column_options(self, table_name, column, options)\n</code></pre> <ul> <li>table_name: the name or id of the table</li> </ul>"},{"location":"python/columns/#example_7","title":"Example","text":"<pre><code>base.add_column_options('Table1', 'My choices', [\n        {\"name\": \"ddd\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n        {\"name\": \"eee\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n        {\"name\": \"fff\", \"color\": \"#aaa\", \"textColor\": \"#000000\"},\n])\n</code></pre>"},{"location":"python/columns/#add-column-cascade-settings","title":"Add column cascade settings","text":"<p>Used by single-select column, to add a limitation of child column options according to the option of parent column</p> <pre><code>add_column_cascade_settings(table_name, child_column, parent_column, cascade_settings)\n</code></pre> <ul> <li>table_name: the name or id of the table</li> <li>child_column: name of child column</li> <li>parent_column: name of parent column</li> </ul>"},{"location":"python/columns/#example_8","title":"Example","text":"<pre><code>base.add_column_cascade_settings(\"Table1\", \"single-op-col-c\", \"single-op-col\", {\n  \"aaa\": [\"aaa-1\", \"aaa-2\"], # If \u201caaa\u201d is selected by parent column, the available options of child column are \"aaa-1 and aaa-2\"\n  \"bbb\": [\"bbb-1\", \"bbb-2\"],\n  \"ccc\": [\"ccc-1\", \"ccc-2\"]\n})\n</code></pre>"},{"location":"python/columns/#delete-column","title":"Delete column","text":"<p>Delete a column</p> <pre><code>base.delete_column(table_name, column_key)\n</code></pre> <ul> <li>table_name: the name or id of the table</li> </ul>"},{"location":"python/columns/#example_9","title":"Example","text":"<pre><code>base.delete_column('Table1', 'bsKL')\n</code></pre>"},{"location":"python/constants/","title":"Constants","text":"<p>In the script there may be some constants we need to know</p>"},{"location":"python/constants/#columntypes","title":"ColumnTypes","text":"<p>Column type, when insert/add columns, change column types, etc. need to be used</p> <pre><code>from seatable_api.constants import ColumnTypes\n\nColumnTypes.NUMBER              # number\nColumnTypes.TEXT                # text\nColumnTypes.LONG_TEXT           # long text\nColumnTypes.CHECKBOX            # checkbox\nColumnTypes.DATE                # date &amp; time\nColumnTypes.SINGLE_SELECT       # single select\nColumnTypes.MULTIPLE_SELECT     # multiple select\nColumnTypes.IMAGE               # image\nColumnTypes.FILE                # file\nColumnTypes.COLLABORATOR        # collaborator\nColumnTypes.LINK                # link to other records\nColumnTypes.FORMULA             # formula\nColumnTypes.CREATOR             # creator\nColumnTypes.CTIME               # create time\nColumnTypes.LAST_MODIFIER       # last modifier\nColumnTypes.MTIME               # modify time\nColumnTypes.GEOLOCATION         # geolocation\nColumnTypes.AUTO_NUMBER         # auto munber\nColumnTypes.URL                 # URL\n</code></pre>"},{"location":"python/context/","title":"Context","text":"<p>When the script is running in the cloud, the context object provides a context environment. Here's how to use it</p> <pre><code>from seatable_api import context\n\ncontext.server_url # Server URL, used to initialize Base\ncontext.api_token  # API token for access a base\ncontext.current_table  # The name of the table that the current user is viewing when the user runs a script manually\ncontext.current_row # When the user manually runs a script, the line where the cursor is currently located\ncontext.current_username # The System ID of the user who runs the script manually (in old verison, it is called current_user_id)\ncontext.current_id_in_org # The id of the user in the team, it can be set by the team admin via Web UI\n</code></pre>"},{"location":"python/dateutils/","title":"DateUtils","text":"<p>We provide a set of functions for the date operations based on the datetime module of python. These functions have the same behavior as the functions provided by the formula column of SeaTable.</p> <p>About timezone: If the input time string has a timezone info, it will be automatically converted to local time. </p>"},{"location":"python/dateutils/#function-import","title":"function import","text":"<pre><code>from seatable_api.date_utils import dateutils\n</code></pre>"},{"location":"python/dateutils/#date","title":"date","text":"<p>Return the ISO formatted date string</p> <pre><code>dateutils.date(2020, 5, 16) # 2020-05-16\n</code></pre>"},{"location":"python/dateutils/#now","title":"now","text":"<p>Return the ISO formatted date time of current and accurated to seconds</p> <pre><code>dateutils.now() # 2022-02-07 09:44:00\n</code></pre>"},{"location":"python/dateutils/#dateadd","title":"dateadd","text":"<p>Addition operation for a datetime by different units such as years, months, weeks, days, hours,  minutes and seconds, default by days</p> <pre><code>time_str = \"2020-6-15\"\ntime_str_s = \"2020-6-15 15:23:21\"\n\ndateutils.dateadd(time_str, -2, 'years') # 2018-06-15\ndateutils.dateadd(time_str, 3, 'months') # 2020-09-15\ndateutils.dateadd(time_str_s, 44, 'minutes') # 2020-06-15 16:07:21\ndateutils.dateadd(time_str_s, 1000, 'days') # 2023-03-12 15:23:21\ndateutils.dateadd(time_str_s, 3, 'weeks') # 2020-07-06 15:23:21\ndateutils.dateadd(time_str_s, -3, 'hours') # 2020-06-15 12:23:21\ndateutils.dateadd(time_str_s, 3, 'seconds') # 2020-06-15 15:23:24\n</code></pre>"},{"location":"python/dateutils/#datediff","title":"datediff","text":"<p>Caculation of the different between 2 date times by different units such as S, Y, D, H, M, YM, MD, YD</p> <ul> <li>YM: The difference between the months in start_date and end_date. The days and years of the dates are ignored.</li> <li>MD: The difference between the days in start_date and end_date. The months and years of the dates are ignored.</li> <li>YD:  The difference between the days of start_date and end_date. The years of the dates are ignored.</li> </ul> <pre><code>time_start = \"2019-6-1\"\ntime_end = \"2020-5-15\"\ndateutils.datediff(start=time_start, end=time_end, unit='S') # seconds 30153600\ndateutils.datediff(start=time_start, end=time_end, unit='Y') # years 0\ndateutils.datediff(start=time_start, end=time_end, unit='D') # days 349\ndateutils.datediff(start=time_start, end=time_end, unit='H') # hours 8376\ndateutils.datediff(start=time_start, end=time_end, unit='M') # months 11\ndateutils.datediff(start=time_start, end=time_end, unit='YM') #  11\ndateutils.datediff(start=time_start, end=time_end, unit='MD') #  14\ndateutils.datediff(\"2019-1-28\",\"2020-2-1\", unit='YD') # 3\n</code></pre>"},{"location":"python/dateutils/#eomonth","title":"eomonth","text":"<p>Return the last day of n months befor or after given date. Parameter months refers to n.</p> <pre><code>date = \"2022-7-4\"\ndateutils.eomonth(date, months=0) # 2022-07-31\ndateutils.eomonth(date, months=2) # 2022-09-30\ndateutils.eomonth(date, months=-5) # 2022-02-28\n</code></pre>"},{"location":"python/dateutils/#year","title":"year","text":"<p>Return the year of given date</p> <pre><code>dateutils.year(\"2019-1-1\") # 2019\n</code></pre>"},{"location":"python/dateutils/#month","title":"month","text":"<p>Return the month of given date</p> <pre><code>dateutils.month(\"2019-5-4\") # 5\n</code></pre>"},{"location":"python/dateutils/#months","title":"months","text":"<p>Return the months difference of two given date</p> <pre><code>dateutils.months(\"2019-5-1\",\"2020-5-4\") # 12\n</code></pre>"},{"location":"python/dateutils/#day","title":"day","text":"<p>Return the day of given date</p> <pre><code>dateutils.day('2020-6-15 15:23:21') # 15\n</code></pre>"},{"location":"python/dateutils/#days","title":"days","text":"<p>Return the days difference of two given date</p> <pre><code>dateutils.days('2019-6-1', '2020-5-15') # 349\n</code></pre>"},{"location":"python/dateutils/#hour","title":"hour","text":"<p>Return the hour of given datetime</p> <pre><code>dateutils.hour(\"2020-1-1 12:20:30\") # 12\n</code></pre>"},{"location":"python/dateutils/#hours","title":"hours","text":"<p>Return the hours difference of two given datetime</p> <pre><code>dateutils.hours(\"2019-6-3 20:1:12\", \"2020-5-3 13:13:13\") # 8033\n</code></pre>"},{"location":"python/dateutils/#minute","title":"minute","text":"<p>Return the minutes of given datetime</p> <pre><code>dateutils.minute(\"2020-5-3 13:13:13\") # 13\n</code></pre>"},{"location":"python/dateutils/#second","title":"second","text":"<p>Return the seconds of given datetime</p> <pre><code>dateutils.second(\"2020-5-3 13:13:33\") # 33\n</code></pre>"},{"location":"python/dateutils/#weekday","title":"weekday","text":"<p>Return the weekday by recording 0 to 6 from Monday to Sunday</p> <pre><code>dateutils.weekday(\"2019-6-3\") # 0\n</code></pre>"},{"location":"python/dateutils/#isoweekday","title":"isoweekday","text":"<p>Return the weekday by recording 1 to 7 from Monday to Sunday based on ISO standard</p> <pre><code>dateutils.isoweekday(\"2019-6-3\") # 1\n</code></pre>"},{"location":"python/dateutils/#weeknum","title":"weeknum","text":"<p>Return the week number of given date by counting the 1st of Jan. as the first week</p> <pre><code>dateutils.weeknum('2012-1-2') # 2\n</code></pre>"},{"location":"python/dateutils/#isoweeknum","title":"isoweeknum","text":"<p>Return the week number of given date based on ISO standard</p> <pre><code>dateutils.isoweeknum('2012-1-2') # 1\n</code></pre>"},{"location":"python/dateutils/#isomonth","title":"isomonth","text":"<p>Return the ISO formatted month</p> <pre><code>dateutils.isomonth(\"2012-1-2\") # 2012-01\n</code></pre>"},{"location":"python/dateutils/#quarter_from_yq","title":"quarter_from_yq","text":"<p>Return a DateQuarter object, and params inlclude year and quarter.</p> <pre><code>q = dateutils.quarter_from_yq(year=2022, quarter=3) # &lt;DateQuarter-2022,3Q&gt;\n</code></pre>"},{"location":"python/dateutils/#quarter_from_ym","title":"quarter_from_ym","text":"<p>Return a DateQuarter object, and params inlclude year and month.</p> <pre><code>q = dateutils.quarter_from_ym(year=2022, month=3) # &lt;DateQuarter-2022,3Q&gt;\n</code></pre>"},{"location":"python/dateutils/#to_quarter","title":"to_quarter","text":"<p>Return a DateQuarter object of a time string.</p> <pre><code>time_str = \"2022-07-17\"\nq = dateutils.to_quarter(time_str) # DateQuarter obj: &lt;DateQuarter-2022,3Q&gt;\n</code></pre>"},{"location":"python/dateutils/#quarters_within","title":"quarters_within","text":"<p>Return a generator which will generate the DateQuater objects between a start date and end date. You can get the last quarter in the generator if you set param <code>include_last=True</code> which is False by default.</p> <pre><code>qs = dateutils.quarters_within(\"2021-03-28\", \"2022-07-17\", include_last=True) # \u751f\u6210\u5668\nlist(qs) # [&lt;DateQuarter-2021,1Q&gt;, &lt;DateQuarter-2021,2Q&gt;,...., &lt;DateQuarter-2022,3Q&gt;]\n</code></pre>"},{"location":"python/dateutils/#quarter-operation","title":"Quarter operation","text":"<p>Some operations are supported based on DateQuater object. Please refer the examples below:</p> <pre><code>q = dateutils.quarter_from_yq(2022, 3)\n\nq.year # 2022\nq.quarter # 3\n\nq.start_date # 2022-07-01\nq.end_date # 2022-09-30\n\nq.days()  # generator, which will generate the date in such quarter\nlist(q.days()) # [datetime.date(2022, 7, 1), datetime.date(2022, 7, 2),....., datetime.date(2022, 9, 30)]\n\nq + 10 # &lt;DateQuarter-2025,1Q&gt; \nq1 = dateutils.quater_from_yq(2021, 1) # &lt;DateQuarter-2021,1Q&gt;\nq - q1 # 6\nq &lt; q1 # False\n\"2022-6-28\" in q # False\n\"2022-8-28\" in q # True\n</code></pre>"},{"location":"python/dateutils/#other-examples","title":"other examples","text":"<p>The date info returned can also be assigned as a param of dateutils. Here are some examples:</p> <pre><code>dt_now = dateutils.now()  # 2022-02-07 09:49:14\n# 1. date after 10 days\ndt_10_days = dateutils.dateadd(dt_now, 10) # 2022-02-17 09:49:14\n# 2. month after 10 days\ndt_month_10_days = dateutils.month(dt_10_days) # 2\n# 3. difference between 2 days\ndt_10_days_before = dateutils.dateadd(dt_now, -10)\ndate_df = dateutils.datediff(dt_10_days_before, dt_10_days, unit=\"D\") # 20\n# 4. handle the time string with time-zone info with local timezone of \"Asia/Shanghai\" (UTC+8)\ntime_str = \"2021-07-17T08:15:41.106+00:00\"\ntime_day = dateutils.day(time_str) # 17\ntime_month = dateutils.month(time_str) # 7\ntime_year = dateutils.year(time_str) # 2021\ntime_hour = dateutils.hour(time_str) # 16\ntime_date = dateuitls.date(time_year, time_month, time_day) # 2021-07-17\n</code></pre>"},{"location":"python/files/","title":"Files","text":"<p>We provides two sets of functions for file uploading and downloading. The first is simple ones, the second is detailed ones, which split the process of downloading/uploading into two steps: 1. get the downloading/uploading link; 2. downloading/uploading the files. The second set is for handling complicated situations such as large file uploading.</p>"},{"location":"python/files/#download","title":"Download","text":""},{"location":"python/files/#simple-method","title":"Simple method","text":"<p>Download a file to a local path</p> <pre><code>base.download_file(file_url, save_path)\n</code></pre> <ul> <li>file_url:  URL of the file, obtained from the cell of file or image column</li> <li>save_path: local path in which the file will be saved after downloading</li> </ul>"},{"location":"python/files/#example","title":"Example","text":"<pre><code>file_url = \"https://cloud.seatable.io/workspace/74/asset-preview/41cd05da-b29a-4428-bc31-bd66f4600817/files/2020-10/aur7e-jqc19.zip\"\nsave_path = \"/tmp/files/custom.zip\"\nbase.download_file(file_url, save_path)\n</code></pre>"},{"location":"python/files/#detailed-method","title":"Detailed method","text":"<p>1)  Get the download link by the URL of the file</p> <p>Consider that your have a file in your base with URL https://dev.seafile.com/dtable-web/workspace/74/asset-preview/41cd05da-b29a-4428-bc31-bd66f4600817/files/2020-10/aur7e-jqc19.zip</p> <pre><code># Call the API by using the part of the URL after the UUID str\ndownload_link = base.get_file_download_link('files/2020-10/aur7e-jqc19.zip')\n</code></pre> <p>2)  Get the file content</p> <pre><code>import requests\nresponse = requests.get(download_link)\n</code></pre>"},{"location":"python/files/#upload","title":"Upload","text":""},{"location":"python/files/#simple-method_1","title":"Simple method","text":""},{"location":"python/files/#upload-a-file-from-memory","title":"Upload a file from memory","text":"<pre><code>base.upload_bytes_file(name, content, file_type='file', replace=False)\n</code></pre> <ul> <li>name: the file name after uploading </li> <li>content:  file content , which is a bytes object</li> <li>file_type:  image or file, default is file if not set</li> <li>replace: replace the file of save name,  default by False</li> </ul> <p>Return </p> <pre><code>{\n    'type': str,  \n    'size': int, \n    'name': str, \n    'url': str, \n}\n</code></pre>"},{"location":"python/files/#example-1-upload-a-file-from-website","title":"Example 1, upload a file from website","text":"<pre><code>import requests\nfile_url = 'http://www.google.com/xxx/xxx/xxx.txt'\nresponse = requests.get(file_url)\ninfo_dict = base.upload_bytes_file = ('my_uploaded_file.txt', response.content)\n</code></pre>"},{"location":"python/files/#example-2-upload-a-file-from-local","title":"Example 2, upload a file from local","text":"<pre><code>local_img_file = '/Users/Desktop/a.png'\nwith open (local_img_file, 'rb') as f:\n  content = f.read()\ninfo_dict = base.upload_bytes_file = ('my_uploaded_img.png', content, file_type='image')\n</code></pre>"},{"location":"python/files/#upload-file-by-local-file-path","title":"Upload file by local file path","text":"<pre><code>base.upload_local_file(file_path, name=None, file_type='file', replace=False)\n</code></pre> <ul> <li>file_path: loacl path of file</li> <li>name:  the file name after uploading, using local file name if it is not set</li> <li>file_type:  image or file, default is file if not set</li> <li>replace: replace the file of save name,  default by False</li> </ul> <p>Return </p> <pre><code>{\n    'type': str,  \n    'size': int, \n    'name': str, \n    'url': str, \n}\n</code></pre>"},{"location":"python/files/#example_1","title":"Example","text":"<pre><code>local_file = '/Users/Desktop/a.png'\ninfo_dict = base.upload_local_file(local_file, name='my_uploaded_img.png', file_type='image', replace=True)\n</code></pre>"},{"location":"python/files/#update-imagefile-cells-in-table","title":"Update image/file cells in table","text":"<p>The step we discussed above is just for uploading file. We need to update the contents of the cells using the returned information too. Here is an example of updating a table named 'Table1' in a base.  </p> <pre><code># Insert a image into a cell in the image column named 'img_col'\nimg_url = info_dict.get('url')\nrow['img_col'] = [img_url]\nbase.update_row('Table1', row['_id'], row)\n\n# Insert a file into a cell in the file column named 'file_col'\nrow['file_col'] = [info_dict]\nbase.update_row('Table1', row['_id'], row)\n\n# Insert a file/image into a cell which already have contents\nrow['img_col'].append([img_url])\nbase.update_row('TableName', row['_id'], row)\nrow['file_col'].append([info_dict])\nbase.update_row('Table1', row['_id'], row)\n</code></pre>"},{"location":"python/files/#detailed-method_1","title":"Detailed method","text":"<p>Get a file upload link</p> <pre><code>base.get_file_upload_link()\n</code></pre> <p>Return</p> <pre><code>{\n  \"parent_path\": \"/asset/3a9d8266-78.....\",     \n  \"upload_link\": \"https://..../upload-api/ea44c4f4...../\"\n}\n</code></pre> <ul> <li>parent_path: the relative parent folder assigned by the server, which will be used when uploading files</li> </ul>"},{"location":"python/files/#example_2","title":"Example","text":"<p>Consider that we want to upload the local file \"/User/Desktop/file.txt\" to the server</p> <pre><code># Get the upload link and file path allocated by server\nupload_link_dict = base.get_file_upload_link()\nparent_dir = upload_link_dict['parent_path']\nupload_link = upload_link_dict['upload_link'] + '?ret-json=1'\n\n# Upload the file\nupload_file_name = \"file_uploaded.txt\" \nreplace = 1 \nresponse = requests.post(upload_link, data={\n    'parent_dir': parent_dir,\n    'replace': 1 if replace else 0 \n}, files={\n    'file': (upload_file_name, open('/User/Desktop/file.txt', 'rb'))\n})\n</code></pre>"},{"location":"python/files/#custom-folders","title":"Custom folders","text":"<p>The following functions provide access to files in custom folders.</p>"},{"location":"python/files/#list-files-in-custom-folders","title":"List files in custom folders","text":"<pre><code>base.list_custom_assets(path)\n</code></pre>"},{"location":"python/files/#example_3","title":"Example","text":"<pre><code>folder_dir = \"/Main/photos\"\n\nbase.list_custom_assets(folder_dir)\n# A dict will be returned including dir and file\n{\n  \"dir\": [{'name': \"MyDir\"}, ...]\n  \"file\":[{'name': \"sky.png\"}, ....]\n}\n</code></pre>"},{"location":"python/files/#get-file-info","title":"Get file info","text":"<p>The data structure returned can be used to updated cells of file column.</p> <pre><code>base.get_custom_file_info(path, name)\n</code></pre>"},{"location":"python/files/#example_4","title":"Example","text":"<pre><code>folder_dir = \"/Main/\"\nfile_name = \"sky.png\"\ninfo_dict = base.get_custom_file_info(path, name)\nrow_id = \"xxxx\"\nfile_col_name = \"File\"\nbase.update_row('Table1', row_id, {\"File\": [info_dict]})\n</code></pre>"},{"location":"python/files/#download-file-to-local","title":"Download file to local","text":"<pre><code>base.download_custom_file(path, save_path)\n</code></pre> <ul> <li>path: the path in custom folder you want to download</li> <li>save_path: the local path you want to save to</li> </ul>"},{"location":"python/files/#example_5","title":"Example","text":"<pre><code>custom_file_path = \"/Main/sky.png\"\nlocal_path = \"/Users/Desktop/sky.png\"\nbase.download_custom_file(custom_file_path, local_path)\n</code></pre>"},{"location":"python/files/#upload-local-file-to-custom-folders","title":"Upload local file to custom folders","text":"<pre><code>base.upload_local_file_to_custom_folder(self, local_path, custom_folder_path=None, name=None)\n</code></pre> <ul> <li>local_path</li> <li>custom_folder_path: default by the root '/'</li> <li>name: the file name you want to save in the custom folders, if not set, the name will be same as that in the local </li> </ul>"},{"location":"python/files/#example_6","title":"Example","text":"<pre><code>local_path = \"/Users/Desktop/sky.png\"\ncustom_path = \"/Main/\"\n\ninfo_dict = base.upload_local_file_to_custom_folder(local_path\uff0c custom_path)\nrow_id = \"xxxx\"\nfile_col_name = \"File\"\nbase.update_row('Table1', row_id, {\"File\": [info_dict]})\n</code></pre>"},{"location":"python/function/","title":"SQL function reference","text":"<p>You can use supported functions in SQL query statements.</p>"},{"location":"python/function/#functions-for-sql","title":"Functions for SQL","text":"<p>With functions you can transform, calculate, combine or merge the values of other columns from the current table. On top of that, functions can refer to each other.</p> <p>The functions supported in SQL are roughly the same as the set of functions supported by formulas in SeaTable.</p> <p>The basic syntax of functions is as follows:</p> <pre><code>FunctionName(parameters...)\n</code></pre> <p>The parameters can be number,string,constants,column name or other functions. Column name cannot be an alias. If the column name contains \"-\", you can use \"`\" to enclose it.</p> <p>Currently SQL query offers the following functions:</p> <ul> <li>Operands</li> <li>Mathematical functions</li> <li>Text functions</li> <li>Date functions</li> <li>Geo functions</li> <li>Logical functions</li> <li>Statistical functions</li> </ul> <p>In this article, we will show you a complete overview of all functions with examples. If you are looking for a specific function, you can use the\u00a0Ctrl+F\u00a0to quickly find an entry on this page.</p>"},{"location":"python/function/#functions-with-examples","title":"Functions with examples","text":"<p>You can use the following constants in the function:</p> OPERATOR DESCRIPTION INPUT RESULT e Returns the Euler number e=2.71828... e+1 3.71828183 pi Returns the circle number Pi. pi 3.14159265 true() Returns the logical value 'true'. true() true false() Returns the logical value 'false'. false() false"},{"location":"python/function/#operands","title":"Operands","text":"<p>Parameters must be strings or numbers. If a number is passed to a parameter that expects a string, it'll be converted to string, and vice versa.</p> OPERATOR DESCRIPTION INPUT RESULT add(num1,num2) Adds two numeric values (num1 and num2) and returns the result. add(1,2) 3 subtract(num1,num2) Subtracts one numeric value (num2) from another (num1). subtract(5,4) 1 multiply(num1,num2) Multiplies two numeric values. multiply(3,4) 12 divide(num1,num2) Divides one numeric value (num1) by another (num2). divide(3,2) 1.5 mod(num1,num2) Calculates the remainder of a division. mod(15,7) 1 power(num1,num2) Calculates the power (num2) of a number (num1). power(3,2) 9 greater(num1,num2) Checks if a numeric value (num1) is greater than another (num2) and returns the logical value 'true' or 'false'. greater(2,3) false lessthan(num1,num2) Checks if a numeric value (num1) is less than another (num2) and returns the logical value 'true' or 'false'. lessthan(2,3) true greatereq(num1,num2) Checks whether a numeric value (num1) is greater than or equal to another (num2) and returns the logical value 'true' or 'false'. greatereq(2,3) false lessthaneq(num1,num2) Checks whether a numeric value (num1) is less than or equal to another (num2) and returns the logical value 'true' or 'false'. lessthaneq(2,3) false equal(num1,num2) Checks if two values (number1, number 2) are equal and returns the logical value 'true' or 'false'. equal(`Old price`, `New price`) false unequal Checks whether two values (number1, number2) are not equal and returns the logical value 'true' or 'false'. unequal(`Old price`, `New price`) true concatenate(string1, string2, ...) Combines several character strings (string1, string 2, ...) into one character string. concatenate(`Supplier`, \" has the product \", `Product`) Microsoft has the product Windows"},{"location":"python/function/#mathematical-functions","title":"Mathematical functions","text":"<p>Parameters must be numbers. If string is passed to a parameter, it'll be converted to number.</p> OPERATOR DESCRIPTION INPUT RESULT abs(number) Returns the absolute value of a number. abs(-2) 2 ceiling(number, significance) Rounds a number to the nearest integer or to the nearest multiple of the specified significance. If either argument is non-numeric, the formula returns an empty value. ceiling(2.14) 3 If the number is an exact multiple of the significance, then no rounding occurs. If the number and the significance are negative, then the rounding is away from 0. If the number is negative and the significance is positive, then the rounding is towards 0. ceiling(-2.14, 4) 0 even(number) Assigns a real number to the nearest larger even number. even(2.14) 4 exp(number) Exponential function for Euler's number e. Returns the value of e given high (number). expr(1) 2.71828... floor(number, significance) Rounds a number to the nearest integer or to the nearest multiple of the specified significance. If either argument is non-numeric, the formula returns an empty value. floor(2.86) 2 If the number is an exact multiple of the significance, then no rounding takes place. If the sign of the number is positive, then the rounding is towards 0. If the sign of the number is negative, then the rounding is away from 0. floor(-3.14, 5) -5 int(number) Assigns the nearest smaller integer to a real number. int(-3.14) -4 lg(number) Logarithm function (number) with 10 as base. lg(100) 2 log(number, base) Logarithm function (number) with definable base. log(81, 3) 4 But if no base is given, this function works exactly like lg(), with 10 as base. log(1000) 3 odd(number) Assigns a real number to the nearest larger odd number. odd(-2.14) -1 round(number, digits) Rounds a number to the nearest integer. If no decimal place (digits) is specified, the number is rounded to the 1st digit to the left of the decimal point. round(3.14) 3 If a positive decimal place (digits) is given, the digit to the right of the decimal point is rounded. round(3.14, 1) 3.1 If a negative decimal place (digits) is given, is rounded to the left of the decimal point. round(3.14, -3) 0 rounddown(number, digits) Rounds a number towards zero. If no decimal place (digits) is given, the number is rounded to the 1st digit left of the decimal point. rounddown(3.12, 1) 3.1 roundup(number, digits) Rounds a number from zero to the nearest whole number. If no decimal place (digits) is given, the number is rounded to the 1st digit left of the decimal point. roundup(-3.15) -4 sign(number) Checks whether a number is greater, equal or less than 0. Returns the values 1, 0 and -1 respectively. In other words: it returns the sign of a number, for '+', 'zero' and '-' with 1, 0, and -1 respectively. sign(-2) -1 sqrt(number) Returns the square root of a number. sqrt(81) 9"},{"location":"python/function/#text-functions","title":"Text functions","text":"OPERATOR DESCRIPTION INPUT RESULT exact(string1, string2) Checks whether two character strings (string1, string2) are exactly identical. Returns the values 'true' or 'false' respectively. Case sensitive. exact('SeaTable', 'Seatable') false find(findString, sourceString, startPosition) Returns the start position of a string (findString) within another string (sourceString). It is case sensitive. Without find, 0 is returned. If the start position (startPosition) is given as decimal, it is rounded down. If the cell in the column for the keyword (findString) is still empty, 1 is returned. If the cell in the column for the target string (sourceString) is still empty, an empty value ('') is returned. find('Sea', 'seaTable', 1) 0 The search will start from the given 'startPosition'. This 'startPosition' has no influence on the result: it always returns the absolute start position. If the 'startPosition' of the character string to be searched for (findString) is given after the actual start position of the character string (sourceString), 0 is returned, since nothing was found from this position. find('table', 'big table', 4) 5 left(string, count) Returns the specified number (count) of characters at the beginning of a string. left('SeaTable', 3) Sea len(string) Returns the number of characters in a string. len('SeaTable') 8 lower(string) Converts a character string to lower case letters. lower('German) german mid(string, startPosition, count) Returns the specified number (count) of characters from the specified start position (startPosition) of a string. mid('SeaTable is the best', 1, 8) SeaTable Start position (startPosition) and count must not be empty, negative or zero. However, if start position (startPosition) and number (count) are given as decimal, they are rounded down. Too much count is ignored. mid('SeaTable is the best.', 10.9, 27.3) is the best. replace(sourceString, startPosition, count, newString) Replaces a part (count) of a character string (sourceString) from a certain start position (startPosition) with another character string (newString). The number (count) of characters is only taken into account for the old string (sourceString), but not for the new string (newString). replace('SeaTable is the best.', 1, 8, 'Seafile') Seafile is the best. If number (count) is given as zero, the new string (newString) is simply added to the old string (sourceString) from the start position (startPosition). replace('SeaTable is the best.', 1, 0, 'Seafile') SeafileSeaTable is the best. rept(string, number) Repeats a string as often (number) as specified. rept('Sea ', 3) SeaSeaSea right(string, count) Returns the specified number (count) of characters at the end of a string. right('SeaTable', 5) Table search(findString, sourceString, startPosition) Returns the start position of a string (findString) within another string (sourceString). It is not case-sensitive. Without find, 0 is returned. If the start position (startPosition) is given as decimal, it is rounded down. If the cell in the column for the keyword (findString) is still empty, 1 is returned. If the cell in the column for the target string (sourceString) is still empty, an empty value ('') is returned. search('Sea', 'seaTable', 1) 1 The search will start from the given 'startPosition'. This 'startPosition' has no influence on the result: it always returns the absolute start position. If the 'startPosition' of the character string to be searched for (findString) is given after the actual start position of the character string (sourceString), 0 is returned, since nothing was found from this position. search('table', 'big table', 6) 0 substitute(sourceString, oldString, newString, index) Replaces existing text (oldString) with new text (newString) in a string (sourceString). If there is more than one text (oldString) in the string (sourceString), only the 'index'-th text is replaced. The text is case-sensitive. substitute('SeaTableTable', 'Table', 'file', 1) SeafileTable If the index is given as 0 or not, all found text (oldString) will be replaced by the new text (newString). substitute('SeaTableTable', 'Table', 'file') Seafilefile T(value) Checks whether a value is text. If so, the text is returned. If no, the return value is empty. T('123') 123 text(number, format) Converts a number into text and formats it in the specified format. The format can be percent and number as well as dollar, euro and yuan. text(150, 'euro') \u20ac150 When a number is converted directly to percent, its absolute value is retained. In other words, 50 is converted into 5000%. But if you want 50%, you have to divide the number by 100 before the conversion. text(50, 'percent') 5000% trim(string) Removes spaces at the beginning and end of a string. trim(' SeaTable ') SeaTable upper(string) Converts a string to uppercase letters. upper('German) GERMAN value(string) Converts a text (string) representing a number into a number. value('123') 123"},{"location":"python/function/#date-functions","title":"Date functions","text":"<p>When passing a parameter with time or date type, you can specify a contant in \"2021-09-01 12:00:01\" or \"2021-09-01\" format. When you query the result of a date function in SQL, the result will be converted to a string in RFC3339 format, e.g. \"2021-09-03T00:00:00+02:00\". Please note that if a date function returns a date type, it cannot be used as parameter for text or maths functions.</p> OPERATOR DESCRIPTION INPUT RESULT date(year, month, day) Returns a date in international format (ISO) from entered year, month and day. If the year is entered with two digits, it is automatically understood as a year in the 1900s. If the number of the month or day is too large (greater than 12 or 31 respectively), these months or days are automatically converted to the next year or month. date(2021, 1, 3) 2021-01-03T00:00:00+02:00 dateAdd(date, count, unit) Adds the specified number (count) of years ('years'), months ('months'), weeks ('weeks'), days ('days'), hours ('hours'), minutes ('minutes') or seconds ('seconds') to a date/time ('date'). dateAdd('2020-02-03', 2, 'days') 2020-02-05T00:00:00+02:00 Tip: if you want to add a complex duration (count) such as 1 day 12 hours, you can convert it to e.g. 24+12=36 hours ('hours') and enter it into the formula as a uniform duration (count). The duration is converted to the smallest unit: in this case, hours. dateAdd('2020-09-04 13:05:18', 36, 'hours') ODER dateAdd(`form submission`, 36, 'hours') 2020-09-06T01:05:18+02:00 datedif(startDate, endDate, unit) Calculates the seconds, days, months, or years between two date values. The optional unit argument can be one of the following: S (seconds), D (full days), M (full months), Y (full years), YD (full days, ignoring years), YM (full months, ignoring days and years), MD (full days, ignoring months and years). If the startDate is empty, a default value of \"1900-01-01\" will be set. If both date values are empty, it will return 0. dateDif('2018-01-01', '2020-01-01') 2 The optional unit argument can be one of the following: S (seconds), D (full days), M (full months), Y (full years), YD (full days, ignoring years), YM (full months, ignoring days and years), MD (full days, ignoring months and years). dateDif('2019-10-11', '2020-12-12', 'M') 14 day(date) Returns the day of a date as a number. The returned number is between 1 and 31. day('2020-01-03) 3 eomonth(startDate, months) Determines the date of the last day of the month that is the specified number (months) of months after the specified date (startDate). If the number (months) is given as 0, the last day of the month is simply determined. eomonth('2020-01-01', 1) 2020-02-29T00:00:00+02:00 If the number (months) is given as negative, the date of the last day of the month that contains the absolute number (months) of months before the specified date (startDate) is determined. eomonth('2020-01-01', -1) 2019-12-31T00:00:00+02:00 hour(date) Returns the hour of a date as a number. The number returned is between 0 and 23. hour('2020-02-14 13:14:52) 13 If no hour is contained in the time specification (date), 0 is returned. hour('2020-02-14) 0 hours(startDate, endDate) Returns the number of hours between two date values (startDate and endDate). The minutes in the date values are not taken into account. hours('2020-02-14 13:14', '2020-02-14 15:14') 2 If no hours are included in the time specification (startDate or endDate), 0 o'clock on this day is automatically assumed. hours('2020-02-14', '2020-02-14 15:14') 15 minute(date) Returns the minutes of a time specification (date) as a number. The number returned is between 0 and 59. minute('2020-02-14 13:14:52 14 If no minutes are included in the time (date), 0 is returned. minute('2020-02-14) 0 month(date) Returns the month of a date as a number. The returned number is between 1 (January) and 12 (December). month('2020-02-14 13:14:52) 2 months(startDate, endDate) Returns the number of months between two date values (startDate and endDate). The days and time in the date values are not taken into account. months('2020-02-01 13:14', '2020-03-31 15:54') 1 If no month is given in the date values (startDate, endDate), January is automatically assumed to be the month. months('2020', '2021') 12 networkdays(startDate, endDate, holiday1, holiday2, ...) Returns the number of full working days between two dates (startDate and endDate). You can also define holidays other than Saturday and Sunday (holiday1, holiday2, etc.), which are also deducted. If you do not want to include public holidays, you can simply omit these parameters. networkdays('2020-01-01', '2020-01-07','2020-01-01') 4 Please note that the specified last day (endDate) is also included in the formula. That means, as in this formula, three working days are counted: the 7th, 8th and 9th of September, 2020. networkdays('2020-09-07', '2020-09-09') 3 now() Returns the current date and time. This column is only updated automatically when the Base is reloaded. now() 2020-09-07T12:59+02:00 second(date) Returns the seconds of a time (date) as a number. The number returned is between 0 and 59. second('2020-02-14 13:14:52') 52 today() Returns the current date. This column is only updated automatically if the Base has been reloaded. today() 2020-09-07T00:00:00+02:00 This function is handy for calculating time between a certain date &amp; time and now. On each reload or recalculation of the Base, the calculation is updated. networkdays('2020-09-01', today()) 4 weekday(date, weekStart) Returns the weekday of a date as a number. The returned number between 1 and 7, where you can define the first day of the week (weekStart): Monday ('Monday') or Sunday ('Sunday' or omitted, since the start as Sunday is the default). A third option is not possible. Upper/lower case is not considered. weekday('2020-01-01', 'Monday') 3 If no 'weekStart' is given or if a 'weekStart' other than 'Monday' or 'Sunday' is given, it is always assumed to be 'Sunday'. So if it should be 'Monday', enter 'Monday'; if it should be 'Sunday', you can omit this parameter. weekday('2020-01-01', 'Thursday') OR weekday('2020-01-01') 4 weeknum(date, return_type) Returns the absolute week number of a date as a number. The returned number is between 1 and 53, where you can define the first day of the week (return_type). Enter the number 1 or 2, or 11 to 17, and 21 as \"return_type\" to define the start of a week: 1/Sunday\u30012/Monday\u300111/Monday\u300112/Tuesday\u300113/Wednesday\u300114/Thursday\u300115/Friday\u300116/Saturday\u300117/Sunday. If you want the week number to be returned according to ISO standard, specify the number of 21 as \"return_type\", or use the function isoweeknum. weeknum('2020-01-12', 11) 2 If no 'return_type' is given, it is always assumed to be 'Sunday'. weeknum('2020-01-12') 3 year(date) Returns the year of a date as a number. year('2020-01-01') 2020 startofweek(date, weekStart) Returns the first day of the week in which the date is located. WeekStart defaults to sunday, or it can be set to monday. startofweek('2021-04-28') 2021-4-25T00:00:00+02:00 quarter(date) Returns the quarter of the date, the return value is 1, 2, 3, 4. quarter('2021-01-01') 1 isodate(date) Returns the ISO string representation of the date. isodate('2021-01-01 11:00:00') 2021-01-01 isomonth(date) Returns the ISO string representation of the year and month isomonth('2021-01-01 11:00:00') 2021-01"},{"location":"python/function/#geo-functions","title":"Geo functions","text":"<p>Geo functions are available since version 2.7.0</p> OPERATOR DESCRIPTION INPUT RESULT province(geolocation) Returns the province of a Geolocation column. province(column_name) \u5317\u4eac\u5e02 city(geolocation) Returns the city of a Geolocation column. city(column_name) \u5317\u4eac\u5e02 district(geolocation) Returns the district of a Geolocation column. district(column_name) \u671d\u9633\u533a"},{"location":"python/function/#logical-functions","title":"Logical functions","text":"OPERATOR DESCRIPTION INPUT RESULT and(logical1, logical2, ...) Checks if all arguments (logical1, logical2, ...) are true (valid, not empty and not equal to zero). If yes, 'true' is returned, otherwise 'false'. and(1, '', 2) false if(logical, value1, value2) Checks if an argument (logical) is true and if yes, returns the first value (value1) and if no, returns the second value (value2). if(1&gt;2, 3, 4) 4 For the condition (logical) only a comparison with is allowed. If you enter only condition (logical) and the first value (value1): it will return the first value (value1) if the condition (logical) is true; and it will return an empty value ('') if the condition (logical) is false. if(`Budget`&gt;`Price`, 'Yes') Yes ifs(logical1, value1, logical2, value2, ...) Checks if one or more conditions (logical1, logical2, ...) are true and returns a value (value1, value2, ...) that matches the first TRUE condition. ifs( 1&gt;2, 3, 5&gt;4, 9) 9 not(boolean) Inverts the logical value (boolean). In other words: converts 'true' to 'false' and 'false' to 'true'. not(and(1, '', 2)) true or(logical1, logical2, ...) Checks if at least 1 of the arguments (value1, value2, ...) is true (valid, not empty and not equal to zero), and returns 'true' in this case. If all arguments are false, then returns 'false'. or(1,'',2) true switch(logical, matcher1, value1, matcher2, value2, ..., default) Evaluates an expression (logical) against a list of values (matcher) and returns the result (value) corresponding to the first matching value. If there is no match, an optional default value is returned. At least 3 parameters (logical, matcher, value) must be specified. switch(`grades`, 1, 'very good', 2, 'good', 3, 'satisfactory', 4, 'passed', 'failed') very good If there are several identical values in the value list (matcher), only the first hit is taken into account. switch(int(68/10), 6, 'OK', 6, 'KO') OK xor(logical1, logical2, ...) Returns the contravalence of all arguments. In other words, checks if the number of true arguments is (logical) odd and returns 'true'. xor(1, 0, 2\\&lt;1) false"},{"location":"python/function/#statistical-functions","title":"Statistical functions","text":"OPERATOR DESCRIPTION INPUT RESULT average(number1, number2, ...) Returns the average of the numbers (number1, number2, ...) average(1, 2, 3, 4, 5) 3 counta(textORnumber1, textORnumber2, ...) Counts the number of non-empty cells (textORnumber1, textORnumber2, ...). These cells can be text or numbers. In this example, 1 and 2 are numbers, '3' is text, and '' is an empty value. counta(1, '', 2, '3') 3 countall(textORnumber1, textORnumber2, ...) Counts the number of elements (textORnumber1, textORnumber2, ...) including numbers (1, 2), text ('3') and empty cells (''). countall(1, '', 2, '3') 4 countblank(textORnumber1, textORnumber2, ...) Counts the number of empty cells. countall(1, '', 2, '3') 1 countItems(column) Counts the number of items in a column. The supported column types are multiple select, collaborator, file, image. (available since version 2.7.0) countItems(column_name) 2"},{"location":"python/libs/","title":"List of libraries supported in the cloud environment","text":"<p>In the cloud environment, Python scripts actually run in a Docker container environment. The container environment has some Python libraries installed by default, which can be imported in scripts. If you need to use other libraries, you need to contact us, or your script can only be run locally.</p>"},{"location":"python/libs/#python-3-standard-library","title":"Python 3 standard library","text":"<p>The cloud environment now use Python 3.7, which supports importing modules in the Python standard library.</p>"},{"location":"python/libs/#third-party-library","title":"Third party library","text":"<p>The following modules are available</p> <ul> <li>SeaTable API, seatable-api</li> <li>Date/time calculation tool library, dateutils</li> <li>http request, requests</li> <li>OpenSSL library, pyOpenSSL</li> <li>Pillow library, Pillow</li> <li>Barcode library, python-barcode</li> <li>Pandas library, pandas</li> <li>Numpy library, numpy</li> </ul>"},{"location":"python/links/","title":"Links","text":""},{"location":"python/links/#get-linked-records","title":"Get linked records","text":"<p>List the linked records of rows. You can get the linked records of multiple rows.</p> <pre><code>base.get_linked_records(table_id, link_column_key, rows)\n</code></pre> <ul> <li>table_id: the id of link table</li> <li>link_column_key: the column key of the link column of link table ( not link_id )</li> <li>rows:  a list,  each item of the which contains a row info including row_id, offset (defualt by 0) and limit (default by 10) of link table</li> </ul>"},{"location":"python/links/#example","title":"Example","text":"<pre><code>base.get_linked_records('0000', '89o4', rows=[\n        {'row_id': 'FzNqJxVUT8KrRjewBkPp8Q', 'limit': 2, 'offset': 0},\n        {'row_id': 'Jmnrkn6TQdyRg1KmOM4zZg', 'limit': 20}\n    ])\n\n# a key-value data structure returned as below\n# key: row_id of link table\n# value: a list which includes the row info of linked table\n{\n    'FzNqJxVUT8KrRjewBkPp8Q': [\n        {'row_id': 'LocPgVvsRm6bmnzjFDP9bA', 'display_value': '1'},                            \n        {'row_id': 'OA6x7CYoRuyc2pT52Znfmw', 'display_value': '3'},\n    ...\n    ],\n    'Jmnrkn6TQdyRg1KmOM4zZg': [\n        {'row_id': 'LocPgVvsRm6bmnzjFDP9bA', 'display_value': '1'},     \n        {'row_id': 'OA6x7CYoRuyc2pT52Znfmw', 'display_value': '3'},\n         ...\n    ]\n}\n</code></pre>"},{"location":"python/links/#add-link","title":"Add link","text":"<p>Add links, link other table records</p> <pre><code>base.add_link(link_id, table_name, other_table_name, row_id, other_row_id)\n</code></pre> <ul> <li>link_id:  link_id in the data attribute of the link column</li> <li>table_name: the name or id of the link table</li> <li>other_table_name: the name or id of the linked table</li> <li>row_id: id of link row</li> <li>other_row_id: id of the linked row </li> </ul>"},{"location":"python/links/#example_1","title":"Example","text":"<pre><code>base.add_link('5WeC', 'real-img-files', 'contact', 'CGtoJB1oQM60RiKT-c5J-g', 'PALm2wPKTCy-jdJNv_UWaQ')\n</code></pre>"},{"location":"python/links/#update-link","title":"Update link","text":"<p>Modify the info of link-type column</p> <pre><code>update_link(self, link_id, table_name, other_table_name, row_id, other_rows_ids)\n</code></pre> <ul> <li>link_id:  link_id in the data attribute of the link column</li> <li>table_name: the name or id of the link table</li> <li>other_table_name: the name or id of the linked table</li> <li>row_id:   id of link row</li> <li>other_rows_ids: ids of the linked row </li> </ul>"},{"location":"python/links/#example_2","title":"Example","text":"<pre><code>base.update_link(\n        link_id='r4IJ',\n        table_name='Table1',\n        other_table_name='Table2',\n        row_id='BXhEm9ucTNu3FjupIk7Xug',\n        other_rows_ids=[\n          'exkb56fAT66j8R0w6wD9Qg',\n          'DjHjwmlRRB6WgU9uPnrWeA'\n        ]\n    )\n</code></pre>"},{"location":"python/links/#batch-update-links","title":"Batch update links","text":"<p>Batch update infos of link-type columns</p> <pre><code>base.batch_update_links(link_id, table_name, other_table_name, row_id_list, other_rows_ids_map)\n</code></pre> <ul> <li>table_name: the name or id of the link table</li> <li>other_table_name: the name or id of the linked table</li> </ul>"},{"location":"python/links/#example_3","title":"Example","text":"<pre><code>link_id = \"WaW5\"\ntable_name = \"Table1\"\nother_table_name =\"Table2\"\nrow_id_list = [\"fRLglslWQYSGmkU7o6KyHw\",\"eSQe9OpPQxih8A9zPXdMVA\",\"FseN8ygVTzq1CHDqI4NjjQ\"]\nother_rows_ids_map = {\n        \"FseN8ygVTzq1CHDqI4NjjQ\":[\"OcCE8aX8T7a4dvJr-qNh3g\",\"JckTyhN0TeS8yvH8D3EN7g\"],\n        \"eSQe9OpPQxih8A9zPXdMVA\":[\"cWHbzQiTR8uHHzH_gVSKIg\",\"X56gE7BrRF-i61YlE4oTcw\"],\n        \"fRLglslWQYSGmkU7o6KyHw\":[\"MdfUQiWcTL--uMlrGtqqgw\",\"E7Sh3FboSPmfBlDsrj_Fhg\",\"UcZ7w9wDT-uVq4Ohtwgy9w\"]\n}\n\nbase.batch_update_links(link_id, table_name, other_table_name, row_id_list, other_rows_ids_map)\n</code></pre>"},{"location":"python/links/#remove-link","title":"Remove link","text":"<p>Delete the link row</p> <pre><code>base.remove_link(link_id, table_name, other_table_name, row_id, other_row_id)\n</code></pre> <ul> <li>table_name: the name or id of the link table</li> <li>other_table_name: the name or id of the linked table</li> </ul>"},{"location":"python/links/#example_4","title":"Example","text":"<pre><code>base.remove_link('5WeC', 'real-img-files', 'contact', 'CGtoJB1oQM60RiKT-c5J-g', 'PALm2wPKTCy-jdJNv_UWaQ')\n</code></pre>"},{"location":"python/links/#get-link-id","title":"Get link id","text":"<p>Get the link id by column name</p> <pre><code>base.get_column_link_id(table_name, column_name, view_name=None)\n</code></pre> <ul> <li>table_name: the name or id of the table</li> </ul>"},{"location":"python/links/#example_5","title":"Example","text":"<pre><code>base.get_column_link_id('Table1', 'Record') # return the link id such as 'aHL2'\n</code></pre>"},{"location":"python/notifications/","title":"Notifications","text":""},{"location":"python/notifications/#send-toast-notifications","title":"Send toast notifications","text":"<p>Send a nofication message which can be toasted on web page to a user.</p> <pre><code>base.send_toast_notification(username, msg, toast_type='success')\n</code></pre> <ul> <li>toast_type:  one of  \"success\", \"warning\", \"danger\"</li> </ul>"},{"location":"python/notifications/#example","title":"Example","text":"<pre><code>base.send_toast_notifation(\n\"aea9e807bcfd4f3481d60294df74f6ee@auth.local\",\n  \"error request\",\n  \"danger\"\n)\n</code></pre>"},{"location":"python/query/","title":"Query with SQL","text":""},{"location":"python/query/#query","title":"Query","text":"<p>Use sql to query a base</p> <pre><code>base.query(sql)\n</code></pre> <ul> <li>sql: sql statement</li> </ul> <p>Note: Only 100 results will be returned by default. To get more results, add <code>limit</code> in SQL statement.</p> <p>Possible exceptions</p> <ul> <li>ValueError: sql can not be empty</li> <li>ConnectionError: network error</li> <li>Exception: no such table</li> <li>Exception: no such column</li> <li>Exception: columns in group by should match columns in select</li> </ul>"},{"location":"python/query/#example","title":"Example","text":""},{"location":"python/query/#basic","title":"Basic","text":"<pre><code>base.query('select name, price, year from Bill limit 1000')\n</code></pre> <p>Result</p> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob', 'price': 300, 'year': 2019},\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300, 'year': 2021},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom', 'price': 100, 'year': 2019},\n    {'_id': 'NxeaB5pDRFKOItUs_Ugxug', 'name': 'Tom', 'price': 100, 'year': 2020},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200, 'year': 2021},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane', 'price': 200, 'year': 2020},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200, 'year': 2021}\n]\n</code></pre>"},{"location":"python/query/#where","title":"WHERE","text":"<pre><code>base.query('select name, price from Bill where year = 2021')\n</code></pre> <p>Result</p> <pre><code>[\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200}\n]\n</code></pre>"},{"location":"python/query/#order-by","title":"ORDER BY","text":"<pre><code>base.query('select name, price, year from Bill order by year')\n</code></pre> <p>Result</p> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob', 'price': 300, 'year': 2019},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom', 'price': 100, 'year': 2019},\n    {'_id': 'NxeaB5pDRFKOItUs_Ugxug', 'name': 'Tom', 'price': 100, 'year': 2020},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane', 'price': 200, 'year': 2020},\n    {'_id': 'Ep7odyv1QC2vDQR2raMvSA', 'name': 'Bob', 'price': 300, 'year': 2021},\n    {'_id': 'W0BrjGQpSES9nfSytvXgMA', 'name': 'Tom', 'price': 200, 'year': 2021},\n    {'_id': 'BTiIGSTgR06UhPLhejFctA', 'name': 'Jane', 'price': 200, 'year': 2021}\n]\n</code></pre>"},{"location":"python/query/#group-by","title":"GROUP BY","text":"<pre><code>base.query('select name, sum(price) from Bill group by name')\n</code></pre> <p>Result</p> <pre><code>[\n    {'SUM(price)': 600, 'name': 'Bob'},\n    {'SUM(price)': 400, 'name': 'Tom'},\n    {'SUM(price)': 400, 'name': 'Jane'}\n]\n</code></pre>"},{"location":"python/query/#distinct","title":"DISTINCT","text":"<pre><code>base.query('select distinct name from Bill')\n</code></pre> <p>Result</p> <pre><code>[\n    {'_id': 'PzBiZklNTGiGJS-4c0_VLw', 'name': 'Bob'},\n    {'_id': 'f1x3X_8uTtSDUe9D60VlYQ', 'name': 'Tom'},\n    {'_id': 'EvwCWtX3RmKYKHQO9w2kLg', 'name': 'Jane'}\n]\n</code></pre>"},{"location":"python/rows/","title":"Rows","text":"<p>The <code>seatable-api</code> module supports multiple functions to work with rows in a SeaTable base.</p> <p>The following parameter names are used in the function descriptions on this page:</p> <ul> <li>table_name: the name or id of a table</li> <li>row_id: the id of a row</li> <li>row_data: a dictionary</li> <li>rows_data: a list of dictionaries</li> </ul>"},{"location":"python/rows/#example","title":"Example","text":"<pre><code>row_data = {\n    \"Name\": \"Ron\"\n}\n\nrows_data = [{\n                'Name': 'Ron',\n                'Birthday': '1975-01-01'\n            }, {\n                'Name': 'Richard',\n                'Birthday': '1978-10-08'\n            }, {\n                'Name': 'Regina',\n                'Birthday': '1976-05-30'\n            }]\n</code></pre>"},{"location":"python/rows/#get-rows","title":"Get rows","text":"<p>Get rows of a table</p> <pre><code>base.list_rows(table_name, view_name=None, order_by=None, desc=False, start=None, limit=None)\n</code></pre> <ul> <li>table_name: name or id of the table</li> <li>view_name: name of the view</li> <li>order_by:  name of the column by which the data is ordered</li> <li>desc: sort order; the possible values are True and False</li> <li>start: start position of rows</li> <li>limit:  number of rows returned, the maximum value for limit is 1 000. </li> </ul>"},{"location":"python/rows/#example_1","title":"Example","text":"<pre><code>rows = base.list_rows('Table1')\nrows = base.list_rows('Table1', view_name='default', order_by='Age', desc=True, start=5, limit=20)\n</code></pre> <p>The query with SQL allows to retrieve more rows and offers more filter options.</p>"},{"location":"python/rows/#get-row","title":"Get row","text":"<p>Get a row of a table by its row ID.</p> <pre><code>base.get_row(table_name, row_id)\n</code></pre>"},{"location":"python/rows/#example_2","title":"Example","text":"<pre><code>row = base.get_row('Table1', 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre>"},{"location":"python/rows/#append-row","title":"Append row","text":"<p>Append a row to a table</p> <pre><code>base.append_row(table_name, row_data)\n</code></pre>"},{"location":"python/rows/#example_3","title":"Example","text":"<pre><code>row_data = {\n    \"Name\": \"Ron\"\n}\n\nbase.append_row('Table1', row_data)\n</code></pre>"},{"location":"python/rows/#insert-row","title":"Insert row","text":"<p>Insert a row to a table</p> <pre><code>base.insert_row(table_name, row_data, anchor_row_id)\n</code></pre> <ul> <li>anchor_row_id: the row under which the new row will be inserted</li> </ul>"},{"location":"python/rows/#example_4","title":"Example","text":"<pre><code>row_data = {\n    \"Name\": \"Ron\"\n}\n\nbase.insert_row('Table1', row_data, 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre>"},{"location":"python/rows/#batch-append-rows","title":"Batch append rows","text":"<p>Append multiple rows to a table</p> <pre><code>base.batch_append_rows(table_name, rows_data)\n</code></pre>"},{"location":"python/rows/#example_5","title":"Example","text":"<pre><code>rows_data = [{\n                'Name': 'Ron',\n                'Birthday': '1975-01-01'\n            }, {\n                'Name': 'Richard',\n                'Birthday': '1978-10-08'\n            }, {\n                'Name': 'Regina',\n                'Birthday': '1976-05-30'\n            }]\nbase.batch_append_rows('Table6', rows_data)\n</code></pre>"},{"location":"python/rows/#update-row","title":"Update row","text":"<p>Update a row</p> <pre><code>base.update_row(table_name, row_id, row_data)\n</code></pre>"},{"location":"python/rows/#example_6","title":"Example","text":"<pre><code>row_data = {\n    \"dcXS\": \"123\"\n}\nbase.update_row('Table1', 'U_eTV7mDSmSd-K2P535Wzw', row_data)\n</code></pre>"},{"location":"python/rows/#batch-update-rows","title":"Batch update rows","text":"<p>Update multiple rows in a table</p> <pre><code>batch_update_rows(table_name, rows_data)\n</code></pre>"},{"location":"python/rows/#example_7","title":"Example","text":"<pre><code>updates_data = [\n        {\n            \"row_id\": \"fMmCFyoxT4GN5Y2Powbl0Q\",\n            \"row\": {\n                \"Name\": \"Ron\",\n                \"age\": \"36\"\n            }\n        },\n        {\n            \"row_id\": \"cF5JTE99Tae-VVx0BGT-3A\",\n            \"row\": {\n                \"Name\": \"Richard\",\n                \"age\": \"33\"\n            }\n        },\n        {\n            \"row_id\": \"WP-8rb5PSUaM-tZRmTOCPA\",\n            \"row\": {\n                \"Name\": \"Regina\",\n                \"age\": \"22\"\n            }\n        }\n    ]\nbase.batch_update_rows('Table1', rows_data=updates_data)\n</code></pre>"},{"location":"python/rows/#delete-row","title":"Delete row","text":"<p>Delete a row in a table</p> <pre><code>base.delete_row(table_name, row_id)\n</code></pre>"},{"location":"python/rows/#example_8","title":"Example","text":"<pre><code>base.delete_row('Table1', 'U_eTV7mDSmSd-K2P535Wzw')\n</code></pre>"},{"location":"python/rows/#batch-delete-rows","title":"Batch delete rows","text":"<p>Delete multiple rows in a table</p> <pre><code>base.batch_delete_rows(table_name, row_ids)\n</code></pre>"},{"location":"python/rows/#example_9","title":"Example","text":"<pre><code>del_rows = rows[:3]\nrow_ids = [row['_id'] for row in del_rows]\nbase.batch_delete_rows('Table1', row_ids)\n</code></pre>"},{"location":"python/sql/","title":"SQL in SeaTable","text":"<p>You can use SQL to query data in SeaTable. If some tables in a base are archived, archived rows are also queried, as well as rows that are not archived yet.</p>"},{"location":"python/sql/#supported-sql-syntax","title":"Supported SQL Syntax","text":"<p>Currently only <code>select</code>, <code>insert</code>, <code>update</code>, and <code>delete</code> statements are supported. (<code>insert</code>, <code>update</code>, and <code>delete</code> statements require version 2.7 or later)</p> <p>The synatx of <code>select</code> statement is:</p> <pre><code>SELECT [DISTINCT] fields FROM table_name [WhereClause] [GroupByClause] [HavingClause] [OrderByClause] [Limit Option]\n</code></pre> <p>Notes:</p> <ul> <li>Selecting from multiple tables (<code>JOIN</code>) is not supported.</li> <li>Most SQL syntax can be used in where clause, including arithmetic expressions, comparison operators, <code>[NOT] LIKE</code>, <code>IN</code>, <code>BETWEEN ... AND ...</code>, <code>AND</code>, <code>OR</code>, <code>NOT</code>, <code>IS [NOT] TRUE</code>, <code>IS [NOT] NULL</code>.<ul> <li>Arithmetic expressions only support numbers.</li> <li><code>LIKE</code> only supports strings. The key word <code>ILIKE</code> can be used instead of <code>LIKE</code> to make the match case-insensitive.</li> <li><code>BETWEEN ... AND ...</code> only supports numbers and time.</li> <li>Time constants should be strings in ISO format (e.g. \"2020-09-08 00:11:23\"). Since 2.8 version, strings in RFC 3339 format are supported (such as \"2020-12-31T23:59:60Z\").</li> </ul> </li> <li><code>GROUP BY</code> uses strict syntax. The selected fields must appear in group by list, except for aggregation functions (<code>COUNT</code>, <code>SUM</code>, <code>MAX</code>, <code>MIN</code>, <code>AVG</code>) and formulas (see extended syntax section below).</li> <li><code>HAVING</code> filters rows resulting from the group by clause. Only fields referred in the \"GROUP BY\" clause or aggregation functions (such as \"SUM\") can be used in having clause. Other syntax is the same as specified for the where clause.</li> <li>Fields in \"order by\" list must be a column or an expression in the selected fields. For example, <code>select a from table order by b</code> is invalid; while <code>select a from table order by b</code> and <code>select abs(a), b from table order by abs(a)</code> are valid.</li> <li>Limit options are in MySQL format. The general syntax is <code>OFFSET ... LIMIT ...</code>. You may obmit <code>OFFSET</code> or <code>LIMIT</code>.</li> <li>Field alias with <code>AS</code> syntax is supported. For example, <code>select table.a as a from table</code> returns rows whose first column is keyed by \"a\". There are two notes:<ul> <li>Field alias can be referred in <code>group by</code>, <code>having</code> and <code>order by</code> clauses. E.g., <code>select t.registration as r, count(*) as c from t group by r having c &gt; 100</code> is valid.</li> <li>Field alias cannot be referred in <code>where</code> clause. E.g., <code>select t.registration as r, count(*) from t group by r where r &gt; \"2020-01-01\"</code> will report syntax error.</li> </ul> </li> </ul> <p>Each returned row is a JSON map. The keys of the maps are the column keys, NOT column names. To use column names as keys, the <code>convert_keys</code> parameter (available since version 2.4) in query request should be TRUE.</p> <p>The synatx of <code>insert</code>, <code>update</code>, and <code>delete</code> statements are:</p> <pre><code>INSERT INTO table_name [column_list] VALUES value_list [, ...]\n\nUPDATE table_name SET column_name = value [, ...] [WhereClause]\n\nDELETE FROM table_name [WhereClause]\n</code></pre> <ul> <li><code>column_list</code> is a list of column names surrounded by parentheses. If omitted, it defaults to all updatable columns.</li> <li><code>value_list</code> is a list of values surrounded by parentheses. Values must be in the same order as the column list, for example: <code>(1, \"2\", 3.0)</code>.</li> <li>Multivalued columns, such as multiple-select column type, requires values to be surrounded by parentheses, for example: <code>(1, \"2\", 3.0, (\"foo\", \"bar\"))</code>.</li> <li>Values of single-select and multiple-select column types must be option names, not option keys.</li> <li><code>WhereClause</code> is optional. If omitted, all rows in the table are included.</li> <li><code>INSERT</code> statement only supports bases that have been archived. The rows will be inserted into big-data storage. It'll return error if the base is not archived yet. If you want to insert rows into such bases, please use APIs provided by dtable-server.</li> <li><code>UPDATE</code> and <code>DELETE</code> statements allows updating/deleting rows in both normal and big-data storage.</li> </ul> <p>Note: these column types are not allowed to insert or update:</p> <ul> <li>built-in columns, such as <code>_id</code>, <code>_ctime</code>.</li> <li>image, file, formula, link, link-formula, geolocation, auto-number, button</li> </ul>"},{"location":"python/sql/#data-types","title":"Data Types","text":"<p>Below is mapping from SeaTable column types to SQL column types.</p> SeaTable Column Type SQL Column Type Query result format Use in WHERE clause Use in GROUP BY / ORDER BY clause text String Supported Supported. long-text String Raw text in Markdown formst Supported Supported number Float Supported Supported single-select String Returned rows contain the option key by default. To return the option name, the <code>convert_keys</code> parameter (available since version 2.4) in query request should be TRUE. Refer an option by its name. E.g. <code>where single_select = \"New York\"</code>. Order by option keys, not option names multiple-select List of strings Returned rows contain the option key by default. To return the option name, the <code>convert_keys</code> parameter (available since version 2.4) in query request should be TRUE. Refer an option by its name. E.g. <code>where multi_select = \"New York\"</code>. More details in \"List Types\" section below. More details in \"List Types\" section below. checkbox Bool Supported Supported date Datetime Time strings in RFC 3339 format Constants are expressed in strings in ISO format. e.g. \"2006-1-2\" or \"2006-1-2 15:04:05\". Since 2.8 version, strings in RFC 3339 format are supported (such as \"2020-12-31T23:59:60Z\"). Supported image List of URL for images A JSON array with image URLs as elements Supported. More details in \"List Types\" section below. Supported. More details in \"List Types\" section below. file Will be returned as JSON format string when queried. Not supported Not Supported Not Supported collaborator List of user IDs Format is like 5758ecdce3e741ad81293a304b6d3388@auth.local. If you need user names, you have to convert with seatable APIs. Supported. More details in \"List Types\" section below. Supported. More details in \"List Types\" section below. link to other records List of linked rows Supported. More details in \"List Types\" section below. Supported. More details in \"List Types\" section below. Supported. More details in \"List Types\" section below. formula The type depends on the return value of the formula. Depends on the type of the return value Depends on the type of the return value Depends on the type of the return value _creator User ID as stirng Format is like 5758ecdce3e741ad81293a304b6d3388@auth.local. If you need user names, you have to convert with seatable APIs. Supported Supported _ctime Datetime Time strings in RFC 3339 format Constants are expressed in strings in ISO format. e.g. \"2006-1-2\" or \"2006-1-2 15:04:05\". Since 2.8 version, strings in RFC 3339 format are supported (such as \"2020-12-31T23:59:60Z\"). Supported _last_modifier User ID as string Format is like 5758ecdce3e741ad81293a304b6d3388@auth.local. If you need user names, you have to convert with seatable APIs. Supported Supported _mtime Datetime Time strings in RFC 3339 format Constants are expressed in strings in ISO format. e.g. \"2006-1-2\" or \"2006-1-2 15:04:05\". Since 2.8 version, strings in RFC 3339 format are supported (such as \"2020-12-31T23:59:60Z\"). Supported auto number String Supported Supported. url String Supported Supported. email String Supported Supported. duration Float Returned in the unit of seconds Supported Supported."},{"location":"python/sql/#list-types","title":"List Types","text":"<p>In SeaTable, two categories of column types are list types:</p> <ul> <li>Built-in list types: including multiple selection, image, collaborator, and link to other records.</li> <li>Return values for the following link formulas: formula columns whose formula is <code>{link.column}</code> or <code>lookup</code>; link formula columns whose formula is <code>lookup</code>, <code>findmin</code> or <code>findmax</code>.</li> </ul> <p>When referring a column with list type in <code>where</code> conditions, the following rules apply, depending on the type for the list elements. (If an operator is not listed below, it's unsupported.)</p> Element Type Operator Rule string IN, extended list operators (e.g. <code>has any of</code>) Follow the rules of the operator. string LIKE, ILIKE If there is only 1 element, use that element; If there are more than 1 elements, only return <code>true</code> for <code>!=</code> operator; If there is no element, use \"\". string IS NULL Return <code>true</code> when the list is empty or no data in the cell. string =, != If there is only 1 element, use that element; otherwise only return <code>true</code> for <code>!=</code> operator. float IN, extended list operators (e.g. <code>has any of</code>) Follow the rules of the operator. float =, !=, \\&lt;, \\&lt;=, &gt;, &gt;=, between If there is only 1 element, use that element; otherwise only return <code>true</code> for <code>!=</code> operator. float IS NULL Return <code>true</code> when the list is empty or no data in the cell. float Arithmetics such as +/-/*// Use the first element for calculation. Datetime IN, extended list operators (e.g. <code>has any of</code>) Follow the rules of the operator. Datetime =, !=, \\&lt;, \\&lt;=, &gt;, &gt;=, between If there is only 1 element, use that element; otherwise only return <code>true</code> for <code>!=</code> operator. Datetime IS NULL Return <code>true</code> when the list is empty or no data in the cell. bool IS TRUE If there is only 1 element, use that element; otherwise return <code>false</code>. linked record Follow the rules for the type of the display column. <p>When a list column is returned in a selected field, only the first 10 elements are returned.</p> <p>When used in <code>group by</code> or <code>order by</code> clauses, the elements for each list will first be sorted in ascending order, then the lists will be sorted by the rules below:</p> <ul> <li>Compare the elements one by one, list with smaller element is sorted before list with larger element.</li> <li>If all elements compared in step 1 are equal, shorter list is sorted before longer list.</li> <li>Otherwise the tow lists are equal.</li> </ul> <p>If a list column is passed as parameter to a formula, and the parameter expects a scalar value, the first element will be used. And if the element is a linked record, the value of its display column will be used.</p> <p>When applying aggregate functions (min, max, sum, avg) to a list column, if there is only 1 element in the list, use that element; otherwise this row will not be aggregated.</p>"},{"location":"python/sql/#null-values","title":"NULL Values","text":"<p>NULL value is distinct from 0. It represents a missing value. The following values are treated as NULL:</p> <ul> <li>Empty cells in a table is treated as NULL.</li> <li>Values which cannot be converted to the column type will be treated as NULL.</li> <li>Empty strings (\"\") will be treated as NULL too. This is different from standard SQL.</li> <li>Lists are treated as NULL based on the rules described in the \"List Types\" section.</li> <li>Functions or formula columns that return error will be treated as NULL.</li> </ul> <p>In the <code>Where</code> clause:</p> <ul> <li>Arithmetic operations (+, -, * etc.) on NULL values will return NULL.</li> <li><code>!=</code>, <code>NOT LIKE</code>, <code>NOT IN</code>, <code>NOT BETWEEN</code>, <code>HAS NONE OF</code>, <code>IS NOT TRUE</code>, and <code>IS NULL</code> operations will return true when the value is NULL.</li> <li><code>AND</code>, <code>OR</code>, <code>NOT</code> treat NULL values as false.</li> <li>Aggregate functions (min, max, sum, avg) will ignore NULL values.</li> </ul> <p>In formulas, NULL values will be converted to 0 or an empty strings.</p>"},{"location":"python/sql/#extended-syntax","title":"Extended Syntax","text":""},{"location":"python/sql/#use-formulas-in-sql-query","title":"Use Formulas in SQL Query","text":"<p>You may use a formula syntax that's almost the same as SeaTable's formulas in SQL queries. There are a few special notes:</p> <ul> <li>Link formulas are not supported. e.g. {link.age} is invalid.</li> <li>Reference to columns should not be enclosed by curly brackets (\"{}\"). Don't write <code>select abs({column}) from talbe;</code>. Wirte <code>select abs(column) from table;</code>. This is consistent with standard SQL syntax.</li> <li>You can use back quote (\"``\") to enclose column references, when column name contains space or \"-\". E.g. select abs(<code>column-a</code>) from table;</li> <li>You may not use column alias in formulas. E.g. <code>select abs(t.column) from table as t;</code> is invalid.</li> <li>formulas can be use in group by and order by clauses.</li> </ul> <p>A few extended formulas are supported:</p> <ul> <li><code>STARTOFWEEK(date, weekStart)</code>: returns the first day of the week where \"date\" is in. \"weekstart\" can be used to choose \"sunday\" or \"monday\" as the first day of a week.</li> <li><code>Quarter(date)</code>: Returns the quater of the date. Return value is 1, 2, 3 or 4.</li> <li><code>ISODate(date)</code>: Returns ISO format string for the date. E.g. \"2020-09-08\".</li> <li><code>ISOMonth(date)</code>: Returns ISO format string for the month where \"date\" is in. E.g. \"07\".</li> </ul> <p>The above formulas can be used for group by week, quater, date and month. E.g. <code>select sum(sale) from SalesRecord group by ISODate(SalesTime);</code> will return the total sales amount for each day.</p> <p>For more details, please refer to [./function.md].</p>"},{"location":"python/sql/#extended-list-operators","title":"Extended List Operators","text":"<p>Some column types in SeaTable have list values. The SeaTable UI supports a few special filters for such types. They are <code>HAS ANY OF</code>, <code>HAS ALL OF</code>, <code>HAS NONE OF</code>, <code>IS EXACTLY</code>. You may also use the same syntax to filter such columns with SQL.</p> <p>For example, if column \"city\" is of type multi-select, and we want to find out all rows that contains \"New York\" or \"Paris\" in the \"city\" column, you can query: <code>select * from table where city has any of (\"New York\", \"Paris\");</code>. The list of string constant are enclosed with brackets, just like the syntax for <code>IN</code>.</p>"},{"location":"python/sql/#indexes","title":"Indexes","text":"<p>To improve query performance, SeaTable will automatically create indexes for the rows stored in big data storage engine. Currently, text, number, date, single-select, multiple-select, collaborators, creator, create date, modifier, modification date columns are indexed.</p> <p>When you add or delete a column in a table, the index for this column is not added/removed immediately. Indexes creation and deletion are triggered in two cases:</p> <ol> <li>When you archive the table for the next time, indexes are created for new columns and indexes for remvoed columns are removed.</li> <li>Users may manage indexes from \"index management\" UI. You can open it from the \"Big data management\" menu in the base.</li> </ol>"},{"location":"python/user/","title":"Users","text":""},{"location":"python/user/#get-a-user-info","title":"Get a user info","text":"<p>A dict contains user's name and id in org will be returned</p> <pre><code>base.get_user_info(username)\n</code></pre>"},{"location":"python/user/#example","title":"Example","text":"<pre><code>base.get_user_info(\"aea9e807bcfd4f3481d60294df74f6ee@auth.local\")\n\n# Dict returned as below:\n# {\"id_in_org\": \"A0001\", \"name\": \"Tom\"}\n</code></pre>"},{"location":"python/websocket/","title":"Websocket","text":""},{"location":"python/websocket/#get-realtime-data-update-notifications","title":"Get realtime data update notifications","text":"<p>By using websocket, you can get realtime data update notifications of a base.</p>"},{"location":"python/websocket/#example","title":"Example","text":"<pre><code>from seatable_api import Base\n\nserver_url = 'https://cloud.seatable.cn'\napi_token = 'c3c75dca2c369849455a39f4436147639cf02b2d'\n\nbase = Base(api_token, server_url)\nbase.auth(with_socket_io=True)\n\nbase.socketIO.wait()\n</code></pre> <p>When Base has data updated, the following will be output in the terminal.</p> <pre><code>2022-07-19 11:48:37.803956 [ SeaTable SocketIO connection established ]\n2022-07-19 11:48:39.953150 [ SeaTable SocketIO on UPDATE_DTABLE ]\n{\"op_type\":\"insert_row\",\"table_id\":\"0000\",\"row_id\":\"YFK9bD1XReSuQ7WP1YYjMA\",\"row_insert_position\":\"insert_below\",\"row_data\":{\"_id\":\"RngJuRa0SMGXyiA-SHDiAw\",\"_participants\":[],\"_creator\":\"seatable@seatable.com\",\"_ctime\":\"\",\"_last_modifier\":\"seatable@seatable.com\",\"_mtime\":\"\"},\"links_data\":{}}\n</code></pre>"},{"location":"python/websocket/#after-getting-data-update-notifications-performance-self-defined-actions","title":"After getting data update notifications, performance self-defined actions","text":"<p>By listen the UPDATE_DTABLE event, you can performance self-defined actions.</p>"},{"location":"python/websocket/#example_1","title":"Example","text":"<pre><code>import json\nfrom seatable_api import Base\nfrom seatable_api.constants import UPDATE_DTABLE\n\nserver_url = 'https://cloud.seatable.cn'\napi_token = 'c3c75dca2c369849455a39f4436147639cf02b2d'\n\ndef on_update(data, index, *args):\n    try:\n        operation = json.loads(data)\n        print(operation)\n        op_type = operation['op_type']\n        table_id = operation['table_id']\n        row_id = operation['row_id']\n        # ... do something\n    except Exception as e:\n        print(e)\n\nbase = Base(api_token, server_url)\nbase.auth(with_socket_io=True)\n\nbase.socketIO.on(UPDATE_DTABLE, on_update)\nbase.socketIO.wait()\n</code></pre>"}]}